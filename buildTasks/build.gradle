import groovy.json.JsonOutput

task develop() {
    def currentDir = file(".")
    def files = fileTree(dir: currentDir, include: "*.bal", exclude: "*-error.bal")
    files.each { file ->
        def taskName = "dev-${file.name}-${file.canonicalPath.length()}"
        def task = tasks.create(taskName) {
            doLast {
                def cmd = "bal run ${file.name} > ${file.name}.out"
                if (file.name.endsWith("error.bal")) {
                    cmd = "bal build ${file.name} 2> ${file.name}.err"
                }
                try {
                    exec {
                        commandLine "bash", "-c", "${cmd}"
                        workingDir currentDir
                    }
                } catch (GradleException e) {
                    compile = false
                }
            }

        }
        develop.dependsOn task
    }
}



task testError() {
    def currentDir = file(".")
    def files = fileTree(dir: currentDir, include: "*-error.bal")
    files.each { file ->
        def taskName = "testError-${file.name}-${file.canonicalPath.length()}"
        def task = tasks.create(taskName) {
            doLast {
                def compile = true
                exec {
                    commandLine "bash", "-c", "bal format ${file.name}"
                    workingDir currentDir
                }
                try {
                    exec {
                        commandLine "bash", "-c", "bal build -o ${file.name}.jar ${file.name} 2> ${file.name}.err1"
                        workingDir currentDir
                    }
                } catch (GradleException e) {
                    compile = false
                }
                if (compile) {
                    throw new GradleException("Test Expected to see error, but not failed.")
                }
                def referenceOutput = new File(file.path.toString() + ".err").text
                def currentOutput = new File(file.path.toString() + ".err1").text
                if (currentOutput != referenceOutput) {
                    def diff = "Error does not match reference error. Expected: [[\n${referenceOutput}\n]] but Found: [[\n${currentOutput}\n]]."
                    throw new GradleException("Test failed. " + diff)
                }
            }

        }
        testError.dependsOn task
    }
}

task testOutput() {
    def currentDir = file(".")
    def files = fileTree(dir: currentDir, include: "*.bal", exclude: "*-error.bal")
    files.each { file ->
        def taskName = "testOutput-${file.name}-${file.canonicalPath.length()}"
        def task = tasks.create(taskName) {
            // inputs.files(file.name, new File("${file.name}.out"))
            // outputs.file "${file.name}.out1"
            doLast {
                def filePath = file.canonicalPath
                def startIndex = filePath.indexOf("docs")
                def partOfPath = filePath.substring(startIndex)
                def additionalData = [name: file.name, path: partOfPath]
                def compile = true
                def output = true
                exec {
                    commandLine "bash", "-c", "bal format ${file.name}"
                    workingDir currentDir
                }
                try {
                    exec {
                        commandLine "bash", "-c", "bal build -o ${file.name}.jar ${file.name}"
                        workingDir currentDir
                    }
                } catch (GradleException e) {
                    compile = false
                }
                additionalData["compile"] = compile
                if (compile) {
                    try {
                        exec {
                            commandLine "bash", "-c", "java -jar ${file.name}.jar > ${file.name}.out1"
                            workingDir currentDir
                        }
                    } catch (GradleException e) {
                        output = false
                    }
                }
                if (compile && output) {
                    def referenceOutput = new File(file.path.toString() + ".out").text
                    def currentOutput = new File(file.path.toString() + ".out1").text
                    additionalData["kind"] = "output"
                    if (currentOutput != referenceOutput) {
                        output = false
                        println("Output does not match reference output. Expected: [[\n${referenceOutput}\n]] but Found: [[\n${currentOutput}\n]].")
                    }
                }
                additionalData["test"] = output
                new File("${file.path}.json").text = JsonOutput.toJson(additionalData)
                if (!compile || !output) {
                    throw new GradleException("Test failed." + additionalData)
                }
            }

        }
        testOutput.dependsOn task
    }
}

task clean() {
    def currentDir = file(".")
    def out1Files = fileTree(dir: currentDir, includes: ["*.bal.out1", "*.bal.jar", "*.bal.json", "*.bal.err1"])
    doLast {
        out1Files.each { file ->
            file.delete()
        }
    }
}

task test(dependsOn: [testOutput, testError, clean]) {
}

task build(dependsOn: [develop, clean]) {
}