<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog Posts on Ballerina Coding Tips</title><link>http://bal.tips/blog/</link><description>Recent content in Blog Posts on Ballerina Coding Tips</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 05 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://bal.tips/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Designing Numeric Literals for Ballerina</title><link>http://bal.tips/blog/2023/06/numeric_literal/</link><pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/blog/2023/06/numeric_literal/</guid><description>Designing Numeric Literals for Ballerina Today, I&amp;rsquo;d like to share our experience and lessons learned while designing the numeric type system for Ballerina Lang.
History In the early days of Ballerina, we adopted int, long, byte, float, and double as dedicated types for each common case. At this stage, we were primarily drawing inspiration from other languages and didn&amp;rsquo;t fully consider the implications of having numerous numerical data types. Our approach was greatly influenced by Java because at that time Ballerina was initially a JVM-based interpreted language.</description></item></channel></rss>