[ballerina_type]
'()' = 'Nil ()'
any = 'Any'
anydata = 'Any Data'
boolean = 'Boolean'
byte = 'Byte'
decimal = 'Decimal'
distinct = 'Distict'
error = 'Error'
float = 'Float'
function = 'Function'
future = 'Future'
handle = 'Handle'
int = 'Int'
intersect = 'Intersection &'
json = 'JSON'
list = 'Array and Tuple'
maps = 'Map and Records'
never = 'Never'
object = 'Object'
optional = 'Optional ?'
readonly = 'Readonly'
regexp = 'Regular Expression'
stream = 'Stream'
string = 'String'
table = 'Table'
typedesc = 'Typedesc'
union = 'Union |'
xml = 'XML'

[ballerina_lang]

# Basic
comment = 'Comments'
identifier = 'Identifiers'
type = 'Types'

# Definitions and Declarations
annotation = 'Annotation Declaration'
class = 'Class Definition'
constant = 'Constant Declaration'
enum = 'Enum Declaration'
function = 'Function Definition'
import = 'Import Declaration'
listener = 'Listener Declaration'
service = 'Services Declaration'
type_definition = 'Type Definition'
variable = 'Variable Declaration'
xml_namespace = 'XML Namespace Declaration'

# Statments
assign = 'Assigment Statement'
break = 'Break Statement'
commit = 'Commit Statement'
continue = 'Continue Statment'
do = 'Do Statement'
fail = 'Fail Statement'
flush = 'Flush'
foreach = 'Foreach Statement'
fork = 'Fork Statement'
if = 'If Statement'
lock = 'Lock Statement'
match = 'Match Statement'
onfail = 'On Fail Clause'
panic = 'Panic Statement'
queryAction = 'Query Action'
receive = 'Worker Message Receive'
remote = 'Remote Call'
resource = 'Resource call'
retry = 'Retry Statement'
return = 'Return Statement'
rollback = 'Rollback Statement'
send = 'Worker Message Send'
start = 'Start Action'
tranaction = 'Transaction Statement'
vardef = 'Variable Definition'
wait = 'Wait Action'
while = 'While Statement'
xmlns = 'XML Namespace Declaration'

# Expression
add = 'Additive Expression'
annotation-access = 'Annotation Access'
anon-func = "Anonymous Functions"
bitwise = 'Bitwise Expressions'
call = 'Function Call'
cast = 'Type Cast'
check = 'Check Expression'
conditional = 'Conditional Expression'
construct = 'Structual Constroctors'
equal = 'Equality Expressions'
error-construct = 'Error Construction'
field-access = 'Field Access'
is = 'Type Test'
let = 'Let Expression'
literal = 'Literals'
logical = 'Logical Expressions'
member-access = 'Member Access'
method-call = 'Method Call'
mul = 'Multiplicative Expression'
object-construct = 'Object Constroction'
optional-field-access = 'Optinal Field Access'
query = 'Query Expression'
range = 'Range Expressions'
relational = 'Relational Expressions'
shift = 'Shift Expressions'
template = 'Template'
tranactional = 'Transactional Expression'
trap = 'Trap Expression'
typeof = 'Typeof'
unary = 'Unary Expressions'
varref = 'Variable Ref'
xml = 'XML Navigation'

# Metadata
annotation_attach = 'Annotation Attachment'
documantation = 'Documentation'

[ballerina_feature]
create = 'Create new values'
data-bind = 'Data Binding'
delete = 'Delete Member'
dos = 'Best Practices'
error = 'Error Handling'
function = 'Functions'
insert = 'Insert Member'
isolate = 'Isolated'
iterate = 'Iterate Values'
main = 'Main Function'
remote = 'Remote Methods'
resource = 'Resources'
service = 'Services'
typenarrow = 'Type Narrowing'
update = 'Update Member'
wokers = 'Workers'
action = 'Actions'
statement = 'Statements'
expression = 'Expressions'
module = 'Modules'
package = 'Packages'

[ballerina_module]
array = 'ballerina/lang.array'
ballerina-http = 'ballerina/http'
ballerina-io = 'ballerina/io'
boolean = 'ballerina/lang.boolean'
decimal = 'ballerina/lang.decimal'
error = 'ballerina/lang.error'
float = 'ballerina/lang.float'
function = 'ballerina/lang.function'
future = 'ballerina/lang.future'
int = 'ballerina/lang.int'
map = 'ballerina/lang.map'
object = 'ballerina/lang.object'
regexp = 'ballerina/lang.regexp'
runtime = 'ballerina/lang.runtime'
stream = 'ballerina/lang.stream'
string = 'ballerina/lang.string'
table = 'ballerina/lang.table'
transaction = 'ballerina/lang.transaction'
typedesc = 'ballerina/lang.typedesc'
value = 'ballerina/lang.value'
xml = 'ballerina/lang.xml'
