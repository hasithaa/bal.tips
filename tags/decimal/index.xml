<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>decimal on Ballerina Coding Tips</title><link>https://bal.tips/tags/decimal/</link><description>Recent content in decimal on Ballerina Coding Tips</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Hasitha Aravinda</copyright><lastBuildDate>Thu, 28 Jul 2022 01:28:56 +0530</lastBuildDate><atom:link href="https://bal.tips/tags/decimal/index.xml" rel="self" type="application/rss+xml"/><item><title>Floating Point Literal</title><link>https://bal.tips/examples/expr/literals/float-literal/</link><pubDate>Tue, 05 Jul 2022 20:49:35 +0530</pubDate><guid>https://bal.tips/examples/expr/literals/float-literal/</guid><description>&lt;p>There are two floating point types, &lt;code>float&lt;/code> and &lt;code>decimal&lt;/code>. Both use the same decimal number (Base 10 number) literal syntax.&lt;/p></description></item><item><title>Floating Point Literal With Exponent</title><link>https://bal.tips/examples/expr/literals/float-exp-literal/</link><pubDate>Tue, 05 Jul 2022 20:49:35 +0530</pubDate><guid>https://bal.tips/examples/expr/literals/float-exp-literal/</guid><description>&lt;p>You can write floating numbers using scientific notation. Letter &lt;code>e&lt;/code> or &lt;code>E&lt;/code> is used as the exponent indicator.&lt;/p></description></item><item><title>Decimal</title><link>https://bal.tips/types/simple/decimal/</link><pubDate>Sun, 10 Jul 2022 10:35:34 +0530</pubDate><guid>https://bal.tips/types/simple/decimal/</guid><description>&lt;p>The &lt;strong>decimal&lt;/strong> basic data type represents &lt;em>128-bit IEEE 754-2008 decimal floating point values&lt;/em>.&lt;/p></description></item><item><title>Numbers Are Immutable</title><link>https://bal.tips/examples/types/readonly/numerical/</link><pubDate>Fri, 08 Jul 2022 21:27:59 +0530</pubDate><guid>https://bal.tips/examples/types/readonly/numerical/</guid><description>&lt;p>Numerical value don&amp;rsquo;t have a storage identity, hence they are Inherently immutable (once created, it can&amp;rsquo;t be change the content of the value).&lt;/p>
&lt;p>Numbers are assignable to a &lt;code>readonly&lt;/code> variable.&lt;/p></description></item><item><title>Numerical Operations</title><link>https://bal.tips/examples/expr/numerical-operations/</link><pubDate>Sat, 09 Jul 2022 18:22:30 +0530</pubDate><guid>https://bal.tips/examples/expr/numerical-operations/</guid><description>&lt;p>&lt;em>int&lt;/em>,&lt;em>float&lt;/em>,&lt;em>decimal&lt;/em> values support multiple operators;&lt;/p>
&lt;ul>
&lt;li>Multiplicative ( &lt;code>*&lt;/code>, &lt;code>/&lt;/code>, &lt;code>%&lt;/code> )&lt;/li>
&lt;li>Additive (&lt;code>+&lt;/code>, &lt;code>-&lt;/code>)&lt;/li>
&lt;li>Relational Operations ( &lt;code>&amp;lt;&lt;/code>, &lt;code>&amp;gt;&lt;/code>, &lt;code>&amp;lt;=&lt;/code>, &lt;code>&amp;gt;=&lt;/code>)&lt;/li>
&lt;li>Equality ( &lt;code>==&lt;/code>, &lt;code>!=&lt;/code>, &lt;code>===&lt;/code>, &lt;code>!===&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>Additionally, &lt;em>int&lt;/em> type supports following operations&lt;/p>
&lt;ul>
&lt;li>Shift Operations ( &lt;code>&amp;lt;&amp;lt;&lt;/code>,&lt;code>&amp;gt;&amp;gt;&lt;/code>, &lt;code>&amp;gt;&amp;gt;&amp;gt;&lt;/code>)&lt;/li>
&lt;li>Binary bitwise (&lt;code>&amp;amp;&lt;/code>, &lt;code>^&lt;/code>, &lt;code>|&lt;/code>)&lt;/li>
&lt;li>Range Operator ( &lt;code>x ... y&lt;/code> )&lt;/li>
&lt;/ul>
&lt;p>See each section for more tips.&lt;/p>
&lt;div class="notices info" >&lt;p>&lt;p>Runtime will panic on integer overflow or on division by zero.&lt;/p>
&lt;/p>&lt;/div></description></item><item><title>Converting Numerical Values</title><link>https://bal.tips/examples/expr/casts/numerical/</link><pubDate>Fri, 08 Jul 2022 20:57:17 +0530</pubDate><guid>https://bal.tips/examples/expr/casts/numerical/</guid><description>&lt;p>Unlike some programming languages, there is no implicit conversion between Ballerina numerical types.&lt;/p></description></item><item><title>Type of a numeric literal</title><link>https://bal.tips/examples/expr/literals/numeric-literals/</link><pubDate>Thu, 28 Jul 2022 01:28:56 +0530</pubDate><guid>https://bal.tips/examples/expr/literals/numeric-literals/</guid><description>&lt;p>A value written in a numeric-literal always represents a precise type, which is the singleton type that the literal represents. The broad type of the literal always belongs only to one of the basic types int, float, or decimal.&lt;/p>
&lt;p>For example, the type of literal &lt;code>10&lt;/code> is integer 10, and its broad type is &lt;code>int&lt;/code>. This is not always true. Depending on the context, literal &lt;code>10&lt;/code> can represent floating point value &lt;code>10.0&lt;/code> or decimal value &lt;code>10&lt;/code>.&lt;/p></description></item></channel></rss>