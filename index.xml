<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Ballerina Coding Tips</title><link>http://bal.tips/</link><description>Recent content in Home on Ballerina Coding Tips</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 20 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://bal.tips/index.xml" rel="self" type="application/rss+xml"/><item><title>A Beginner's Guide to Ballerina Language</title><link>http://bal.tips/docs/introduction/basics/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/introduction/basics/</guid><description>Hello, World Welcome to the world of Ballerina! Let&amp;rsquo;s get started with writing a &amp;ldquo;Hello World&amp;rdquo; program. First start by creating a file called main.bal, and open it up in a text editor such as Visual Studio Code (VSCode). To get the best experience, be sure to install the Ballerina Extension. Save the file with the following code.
1 2 3 4 5 6 7 8 import ballerina/io; public function main() { io:println(&amp;#34;Hello, World.</description></item><item><title>Identifiers - Best Practices and Use Cases</title><link>http://bal.tips/docs/syntax/identifiers/</link><pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/syntax/identifiers/</guid><description>Identifiers Identifiers are names assigned to elements like variables, functions, or types in a program, helping programmers identify and reference specific elements in the source code.
✍ Syntax Common Identifier Syntax &amp;lt;Initial_Char&amp;gt;&amp;lt;Initial_Char | Digits&amp;gt;*
Read More ✍ Syntax Quoted Identifier '&amp;lt;Initial_Char | Digits&amp;gt;*
Read More ✍ Syntax Character Escaping \u{&amp;lt;Digits&amp;gt;} \&amp;lt;Char&amp;gt; Read More ✍ Syntax Qualified Identifier &amp;lt;module-prefix-identifier&amp;gt;:&amp;lt;identifier&amp;gt;
Read More Using suitable identifiers is crucial for creating readable and understandable code.</description></item><item><title>How to Use Comments</title><link>http://bal.tips/docs/syntax/comments/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/syntax/comments/</guid><description>Comments Comments are used to provide more details about the code or temporally disable a section of the source code.
✍ Syntax //
A comment starts with two forward slashes //. The compiler ignores any characters between // and the end of the line. Ballerina supports only single-line comments.
Highlights Multiline comments are not supported. This is solely for comments. For documentation and annotation, different syntax is required.
Refrain from documenting within comments; utilize Markdown syntax instead.</description></item><item><title>Inferring The Type of A Numeric Literal - The Algorithm.</title><link>http://bal.tips/docs/types/rules/numeric-literals/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/types/rules/numeric-literals/</guid><description>Inferring The Type of A Numeric Literal A value written in a numeric literal always represents a specific type, which is determined by the literal itself. The type of a literal can be one of the basic types, such as int, float, or decimal.
For example, the literal 10 represents the integer value 10, and its basic type is int. However, in some contexts, the same literal 10 can also represent a floating-point value 10.</description></item><item><title>Nil Literal</title><link>http://bal.tips/docs/expressions/literals/nil/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/expressions/literals/nil/</guid><description>Nil Literal The nil basic type has only a single value called nil. Nil literal uses the syntax () and null.
✍ Syntax Nil Literal () | null
1 2 3 4 5 6 7 8 9 10 import ballerina/io; public function main() { () a = (); () b = null; io:println(&amp;#34;a:&amp;#34;, a); io:println(&amp;#34;b:&amp;#34;, b); } &amp;nbsp;bal run&amp;nbsp;nil_literal.bal a: b: &amp;nbsp;bal version Ballerina 2201.5.0 (Swan Lake Update 5) // Partial Code.</description></item><item><title>Boolean Literal</title><link>http://bal.tips/docs/expressions/literals/boolean/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/expressions/literals/boolean/</guid><description>Boolean Literal The boolean basic type has only two values; boolean true is written as true and boolean false is written as false.
✍ Syntax true | false
Ballerina doesn&amp;rsquo;t support 0, 1 or any other variations of true or false words as alternative syntax.
1 2 3 4 5 6 7 8 9 10 import ballerina/io; public function main() { boolean enable = true; boolean open = false; io:println(enable); io:println(open); } &amp;nbsp;bal run&amp;nbsp;boolean_literal.</description></item><item><title>Integer Literal</title><link>http://bal.tips/docs/expressions/literals/int/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/expressions/literals/int/</guid><description>Integer Literal Integer values can be expressed in either common the Decimal system, known for its base 10 format, or the Hexadecimal system which uses the Base 16 format.
✍ Syntax Decimal Literal 0 | NonZeroDigit Digit*
Read More ✍ Syntax Hexadecimal Literal HexIndicator [HexDigit+]
Here
HexIndicator = 0x|0X
Read More ✍ Syntax Decimal Integer Literal 0 | NonZeroDigit Digit*
An Integer value can be written as a set of decimal digits.</description></item><item><title>Floating Point Literal</title><link>http://bal.tips/docs/expressions/literals/float/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/expressions/literals/float/</guid><description>Floating Point Literal Floating point values can be expressed in either Decimal (base 10) or Hexadecimal (base 16) systems and come in two types, float and decimal, with slight differences in their representation using floating point literals.
✍ Syntax Decimal Literal [DecimalNumber] . Digit+ [f|F|d|D]
Here
DecimalNumber = 0 | NonZeroDigit Digit*
Read More ✍ Syntax Hexadecimal Literal HexIndicator [HexDigit+] . HexDigit+
Here
HexIndicator = 0x|0X
Read More ✍ Syntax Floating Point Literal With Exponent DecimalNumber Exponent [f|F|d|D] [DecimalNumber] .</description></item><item><title>String Literal</title><link>http://bal.tips/docs/expressions/literals/string/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/expressions/literals/string/</guid><description>String Literal A string literal is used to create a string value. A string literal consists of a sequence of zero or more Unicode Code Points.
✍ Syntax Double Quoted String Literal &amp;quot; StringCharacters* &amp;quot;
Here StringCharacters is an Unicode Code Point except 0xA | 0xD | \ | &amp;quot;
Read More ✍ Syntax String Escape \t | \n | \r | \\ | \&amp;quot;
Read More ✍ Syntax Numeric Escape u{ Digit+ }</description></item><item><title>Byte Array Literal</title><link>http://bal.tips/docs/expressions/literals/byte-array/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/expressions/literals/byte-array/</guid><description>Byte Array Literal Byte Array Literal is a sequence of bytes represented in base16 or base64.
✍ Syntax Base16 Byte Array Literal base16 `&amp;lt;hex-digit&amp;gt;*`
You can use Base16 Byte Array Literal syntax to represent bytes in Hex textual form.
Read More ✍ Syntax Base64 Byte Array Literal base64 `&amp;lt;base64-char&amp;gt;*`
You can use Base64 Byte Array Literal syntax to represent bytes in Base64 encoded form.
Read More ✍ Syntax There are two types of Byte Array Literals.</description></item><item><title>String Template</title><link>http://bal.tips/docs/expressions/templates/string/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/expressions/templates/string/</guid><description>String Template Expression A String template expression constructs a string value using the Template expression.
✍ Syntax String Template string ` BacktickItem* Dollar* `
Here
BacktickItem := BacktickSafeChar| BacktickDollarsSafeChar| Dollar* interpolation interpolation := ${ expression } BacktickSafeChar := ^ ( ` | $ ) BacktickDollarsSafeChar := $+ ^ ( { | ` | $) Dollar := $ ✍ Syntax String Template syntax support interpolation (Syntax ${expr}) and each interpolation expression must have a type that is a subtype of boolean|int|float|decimal|string.</description></item><item><title>XML Template</title><link>http://bal.tips/docs/expressions/templates/xml/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/expressions/templates/xml/</guid><description>XML Template Expression You can use XML template expression to construct an XML value.
✍ Syntax XML Template xml ` BacktickItem* Dollar* `
Here
BacktickItem := BacktickSafeChar| BacktickDollarsSafeChar| Dollar* interpolation interpolation := ${ expression } BacktickSafeChar := ^ ( ` | $ ) BacktickDollarsSafeChar := $+ ^ ( { | ` | $) Dollar := $ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { string name = &amp;#34;tom&amp;#34;; int age = 25; xml person = xml ` &amp;lt;person&amp;gt; &amp;lt;name&amp;gt;${name}&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;${age}&amp;lt;/age&amp;gt; &amp;lt;/person&amp;gt;`; io:println(person); } &amp;nbsp;bal run&amp;nbsp;xml_template.</description></item><item><title>Raw Template Expression</title><link>http://bal.tips/docs/expressions/templates/raw/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/expressions/templates/raw/</guid><description>Raw Template Expression Raw Template expression constructs an object belonging to the `object:RawTemplate object type.
✍ Syntax XML Template ` BacktickItem* Dollar* `
Here
BacktickItem := BacktickSafeChar| BacktickDollarsSafeChar| Dollar* interpolation interpolation := ${ expression } BacktickSafeChar := ^ ( ` | $ ) BacktickDollarsSafeChar := $+ ^ ( { | ` | $) Dollar := $ 1 2 3 4 5 6 7 8 9 10 11 import ballerina/io; public function main() { string name = &amp;#34;&amp;#34;; int age = 30; object:RawTemplate tmp = `My name is ${name}.</description></item><item><title>Ballerina Libraries</title><link>http://bal.tips/library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://bal.tips/library/</guid><description/></item><item><title>Array Lang Library</title><link>http://bal.tips/docs/langlib/array/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/langlib/array/</guid><description>&lt;a class="text-reset m-5 text-center" href="#array-lang-library">
&lt;h1 id="array-lang-library" >Array Lang Library&lt;/h1>
&lt;/a>
&lt;p>The Ballerina Array lang library - &lt;code>ballerina/lang.array&lt;/code> provides functions that operate on list values, such as arrays and tuples.
See available operations in the &lt;a class="text-reset text-decoration-underline" href="https://ballerina.io/spec/lang/master/#lang.boolean">ballerina/lang.boolean&lt;/a> module.&lt;/p></description></item><item><title>Boolean Lang Library</title><link>http://bal.tips/docs/langlib/boolean/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/langlib/boolean/</guid><description>&lt;a class="text-reset m-5 text-center" href="#boolean-lang-library">
&lt;h1 id="boolean-lang-library" >Boolean Lang Library&lt;/h1>
&lt;/a>
&lt;p>The Ballerina Boolean lang library ( &lt;code>ballerina\lang.boolean&lt;/code> ) provides functions that operate on a &lt;code>boolean&lt;/code> value.
As of now, it has only the &lt;code>fromString&lt;/code> function.
See available operations in the &lt;a class="text-reset text-decoration-underline" href="https://ballerina.io/spec/lang/master/#lang.boolean">ballerina/lang.boolean&lt;/a> module.&lt;/p></description></item><item><title>Ballerina Tips Video Playlist</title><link>http://bal.tips/videos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://bal.tips/videos/</guid><description> Ballerina Tips Video Playlist</description></item><item><title>Licenses and Copyrights</title><link>http://bal.tips/copyrights/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>http://bal.tips/copyrights/</guid><description>Licenses and Copyrights Website content, source code, and images are licensed under different licenses. Please read the following sections for more information.
Source and Content Licenses Bal.Tips Copyright © 2022-2023 Hasitha Aravinda. All rights reserved.
Type Description License Content The Content under bal.tips website including the content of pages, posts etc. are licensed under a Creative Commons-NoDerivatives 4.0 International License by Hasitha Aravinda. Ballerina Sources (.bal files) All Ballerina Example Sources in this website are licensed under MIT License, unless explicitly mention in the top of the source code.</description></item><item><title>📰 Ballerina Language News</title><link>http://bal.tips/news/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>http://bal.tips/news/</guid><description> 📰 Ballerina Language News News and updates related to Ballerina, such as new releases or upcoming events. (If page is not loading click the following link.)
A Twitter List by HasithaAravinda Loading...</description></item><item><title>🔎 Search</title><link>http://bal.tips/search/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>http://bal.tips/search/</guid><description>thinking mascot</description></item><item><title>Ballerina Actions</title><link>http://bal.tips/docs/devops/github/ballerina-action/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>http://bal.tips/docs/devops/github/ballerina-action/</guid><description>Simplify Ballerina Workflow on GitHub with setup-ballerina Action The post covers the use of the setup-ballerina GitHub Action to automate the installation of the Ballerina (Swan Lake) distribution in the GitHub Action environment.
The following code block shows how you can configure the GitHub Action to build your Ballerina project. You can find a working example of this in this repository.
The setup-ballerina GitHub Action v1 release requires a mandatory input of the Ballerina Swan Lake distribution version in the form of &amp;ldquo;Swan Lake channel&amp;rdquo; as listed in the bal dist list command.</description></item></channel></rss>