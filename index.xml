<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Ballerina Tips</title><link>https://bal.tips/</link><description>Recent content in Home on Ballerina Tips</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 14 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://bal.tips/index.xml" rel="self" type="application/rss+xml"/><item><title>A Beginner's Guide to Ballerina Language</title><link>https://bal.tips/docs/introduction/basics/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/introduction/basics/</guid><description>&lt;h1 id="hello-world">
Hello, World
&lt;a class="anchor" href="#hello-world">#&lt;/a>
&lt;/h1>
&lt;p>Welcome to the world of Ballerina! Let&amp;rsquo;s get started with writing a &amp;ldquo;Hello World&amp;rdquo; program.
First start by creating a file called &lt;strong>main.bal&lt;/strong>, and open it up in a text editor such as Visual Studio Code (VSCode). To get the best experience, be sure to install the Ballerina Extension. Save the file with the following code.&lt;/p></description></item><item><title>Identifiers - Best Practices and Use Cases</title><link>https://bal.tips/docs/syntax/identifiers/</link><pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/syntax/identifiers/</guid><description>Identifiers - Best Practices and Use Cases # Identifiers are names assigned to elements like variables, functions, or types in a program, helping programmers identify and reference specific elements in the source code.
Identifiers are everywhere in your code Using suitable identifiers is crucial for creating readable and understandable code. Each programming language has its own rules and conventions for identifiers, and in this post, we&amp;rsquo;ll explore mastering identifiers in Ballerina.</description></item><item><title>How to Use Comments</title><link>https://bal.tips/docs/syntax/comments/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/syntax/comments/</guid><description>&lt;h1 id="comments">
Comments
&lt;a class="anchor" href="#comments">#&lt;/a>
&lt;/h1>
&lt;p>Comments are used to provide more details about the code or temporally disable a section of the source code.&lt;/p></description></item><item><title>Nil Data Type</title><link>https://bal.tips/docs/types/simple/nil/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/types/simple/nil/</guid><description>&lt;h1 id="nil-data-type">
Nil Data Type
&lt;a class="anchor" href="#nil-data-type">#&lt;/a>
&lt;/h1>
&lt;p>The &lt;strong>Nil&lt;/strong> data type represents a single value called &lt;strong>nil&lt;/strong>, which represents the absence of any other value.&lt;/p></description></item><item><title>Boolean Data Type</title><link>https://bal.tips/docs/types/simple/boolean/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/types/simple/boolean/</guid><description>&lt;h1 id="boolean-data-type">
Boolean Data Type
&lt;a class="anchor" href="#boolean-data-type">#&lt;/a>
&lt;/h1>
&lt;p>The Boolean data type represents boolean truth values: &lt;code>true&lt;/code> and &lt;code>false&lt;/code>.&lt;/p></description></item><item><title>Integer Data Type</title><link>https://bal.tips/docs/types/simple/int/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/types/simple/int/</guid><description>&lt;h1 id="integer-data-type">
Integer Data Type
&lt;a class="anchor" href="#integer-data-type">#&lt;/a>
&lt;/h1>
&lt;p>The Integer data type represents 64-bit signed integer values.&lt;/p></description></item><item><title>Nil Literal</title><link>https://bal.tips/docs/expressions/literals/nil/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/expressions/literals/nil/</guid><description>&lt;h1 id="nil-literal">
Nil Literal
&lt;a class="anchor" href="#nil-literal">#&lt;/a>
&lt;/h1>
&lt;p>The &lt;code>nil&lt;/code> basic type has only a single value called &lt;code>nil&lt;/code>. Nil literal uses the syntax &lt;code>()&lt;/code> and &lt;code>null&lt;/code>.&lt;/p></description></item><item><title>Boolean Literal</title><link>https://bal.tips/docs/expressions/literals/boolean/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/expressions/literals/boolean/</guid><description>&lt;h1 id="boolean-literal">
Boolean Literal
&lt;a class="anchor" href="#boolean-literal">#&lt;/a>
&lt;/h1>
&lt;p>The &lt;code>boolean&lt;/code> basic type has only two values; boolean true is written as &lt;code>true&lt;/code> and boolean false is written as &lt;code>false&lt;/code>.&lt;/p></description></item><item><title>Integer Literal</title><link>https://bal.tips/docs/expressions/literals/int/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/expressions/literals/int/</guid><description>&lt;h1 id="integer-literal">
Integer Literal
&lt;a class="anchor" href="#integer-literal">#&lt;/a>
&lt;/h1>
&lt;p>Integer values can be expressed in either common the Decimal system, known for its base 10 format, or the Hexadecimal system which uses the Base 16 format.&lt;/p></description></item><item><title>Floating Point Literal</title><link>https://bal.tips/docs/expressions/literals/float/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/expressions/literals/float/</guid><description>&lt;h1 id="floating-point-literal">
Floating Point Literal
&lt;a class="anchor" href="#floating-point-literal">#&lt;/a>
&lt;/h1>
&lt;p>Floating point values can be expressed in either Decimal (base 10) or Hexadecimal (base 16) systems
and come in two types, &lt;code>float&lt;/code> and &lt;code>decimal&lt;/code>, with slight differences in their representation using floating point literals.&lt;/p></description></item><item><title>String Literal</title><link>https://bal.tips/docs/expressions/literals/string/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/expressions/literals/string/</guid><description>&lt;h1 id="string-literal">
String Literal
&lt;a class="anchor" href="#string-literal">#&lt;/a>
&lt;/h1>
&lt;p>A string literal can be written by having the Unicode code points wrapped using two double quotes &lt;code>&amp;quot;&lt;/code>.&lt;/p></description></item><item><title>Byte Array Literal</title><link>https://bal.tips/docs/expressions/literals/byte-array/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/expressions/literals/byte-array/</guid><description>&lt;h1 id="byte-array-literal">
Byte Array Literal
&lt;a class="anchor" href="#byte-array-literal">#&lt;/a>
&lt;/h1>
&lt;p>Byte Array Literal is a sequence of bytes represented in base16 or base64.&lt;/p></description></item><item><title>String Template</title><link>https://bal.tips/docs/expressions/templates/string/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/expressions/templates/string/</guid><description>&lt;h1 id="string-template-expression">
String Template Expression
&lt;a class="anchor" href="#string-template-expression">#&lt;/a>
&lt;/h1>
&lt;p>A String template expression constructs a string value using the Template expression. Support interpolation (Syntax &lt;code>${expr}&lt;/code>) and each interpolation expression must have a type that is a subtype of &lt;code>boolean|int|float|decimal|string&lt;/code>. You can use this expression in places where you use string concatenation, or you need to build multi-line string values.&lt;/p></description></item><item><title>XML Template</title><link>https://bal.tips/docs/expressions/templates/xml/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/expressions/templates/xml/</guid><description>&lt;h1 id="xml-template-expression">
XML Template Expression
&lt;a class="anchor" href="#xml-template-expression">#&lt;/a>
&lt;/h1>
&lt;p>You can use XML template expression to construct an XML value.&lt;/p></description></item><item><title>Raw Template Expression</title><link>https://bal.tips/docs/expressions/templates/raw/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/expressions/templates/raw/</guid><description>&lt;h1 id="raw-template-expression">
Raw Template Expression
&lt;a class="anchor" href="#raw-template-expression">#&lt;/a>
&lt;/h1>
&lt;p>Raw Template expression constructs an object belongs to &lt;code>object:RawTemplate&lt;/code> object type.&lt;/p></description></item><item><title>`length`</title><link>https://bal.tips/docs/langlib/array/functions/length/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/length/</guid><description>length # [üçé, üçá, üçå, üçì].length() ‚ûú 4 The length function is used to determine the number of elements in a list. When this function is called with a list as its input parameter, it returns an int value that represents the number of elements in the list.
Examples # 1import ballerina/io; 2 3public function main() { 4 // Array of strings 5 string[] names = [&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Charlie&amp;#34;]; 6 io:println(&amp;#34;Length of names: &amp;#34;, names.</description></item><item><title>`iterator`</title><link>https://bal.tips/docs/langlib/array/functions/iterator/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/iterator/</guid><description>iterator # [üçé, üçá, üçå, üçì].iterator().next() ‚ûú { value : üçé } The iterator function in Ballerina is used to create an iterator object for an input list. An iterator is an object that can be used to iterate over the members of a list value in a controlled manner. When the iterator function is called with a list as its input parameter, it returns a new iterator object that can be used to iterate over the member of the input list.</description></item><item><title>`enumerate`</title><link>https://bal.tips/docs/langlib/array/functions/enumerate/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/enumerate/</guid><description>enumerate # [üçé, üçá, üçå, üçì].enumerate() ‚ûú [[0, üçé], [1, üçá], [2, üçå], [3, üçì]] The enumerate function creates a new list value that contains pairs of index and member values from the input array. In other words, it associates each member in the input array with its corresponding index, and returns a new list of these index-member pairs.
Examples # Array # 1import ballerina/io; 2 3public function main() { 4 5 string[] names = [&amp;#34;Alice&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Charlie&amp;#34;]; 6 7 [int, string][] pairs = names.</description></item><item><title>`map`</title><link>https://bal.tips/docs/langlib/array/functions/map/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/map/</guid><description>map # [üçé, üçá, üçå, üçì].map(makeCandy) ‚ûú [üç´, üç¨, üç≠, üç∞] The map function applies a given function to each member of a list in order and returns a new list containing the result of applying the function to each member of the original list.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`. # Has the special semantic that when used in a declaration # all uses in the declaration must refer to same type.</description></item><item><title>`forEach`</title><link>https://bal.tips/docs/langlib/array/functions/forEach/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/forEach/</guid><description>forEach # [üçé, üçá, üçå, üçì].foreach(PrintName) ‚ûú Apples, Grapes, Bananas, Strawberries The forEach function applies a given function to each member of a list in order. It iterates over the list and calls the function with each list member as its argument.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`. # Has the special semantic that when used in a declaration # all uses in the declaration must refer to same type.</description></item><item><title>`filter`</title><link>https://bal.tips/docs/langlib/array/functions/filter/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/filter/</guid><description>filter # [üçé, üçá, üçå, üçì].filter(isRed) ‚ûú [üçé, üçì] The filter function selects the members from a list for which a function returns true. It applies the given function to each list member to test whether it should be selected, and returns a new list containing only the members of the original list for which the function evaluates to true.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`.</description></item><item><title>`reduce`</title><link>https://bal.tips/docs/langlib/array/functions/reduce/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/reduce/</guid><description>reduce # [üçé, üçá, üçå, üçì].reduce(makeJuice) ‚ûú ü•§ The reduce function combines the members of a list using a combining function. The combining function takes two arguments: the combined value so far, and a list member. It then returns a new combined value. The reduce function starts with an initial value for the first argument of the combining function, and then applies the combining function to each list member in order, using the current combined value and the current list member as its arguments.</description></item><item><title>`some`</title><link>https://bal.tips/docs/langlib/array/functions/some/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/some/</guid><description>some # [üçé, üçá, üçå, üçì].some(isRed) ‚ûú true The some function tests whether a given function returns true for at least one member of a given list. It applies the function to each member of the list in order until a call returns true, or until all members have been evaluated. If the list is empty, the function returns false.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`.</description></item><item><title>`every`</title><link>https://bal.tips/docs/langlib/array/functions/every/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/every/</guid><description>every # [üçé, üçá, üçå, üçì].every(isFruit) ‚ûú true The every function tests whether a given function returns true for every member of a list. It applies the given function to each list member in order, and stops as soon as a call returns false. If the function returns true for every member of the list, the every function returns true. If the list is empty, the every function returns true.</description></item><item><title>`slice`</title><link>https://bal.tips/docs/langlib/array/functions/slice/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/slice/</guid><description>slice # [üçé, üçá, üçå, üçì].slice(1,3) ‚ûú [üçá, üçå] The slice function returns a new list containing a subset of the members of a given list. The subset is defined by two indices: startIndex and endIndex. The resulting list includes all members of the original list with indices greater than or equal to startIndex, and less than endIndex.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`.</description></item><item><title>`remove`</title><link>https://bal.tips/docs/langlib/array/functions/remove/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/remove/</guid><description>remove # [üçé, üçá, üçå, üçì].remove(1) ‚ûú üçá The remove function removes a member from a given list. The index argument specifies the index of the member to be removed from the list. The remove function returns the member of the list that was removed.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`. # Has the special semantic that when used in a declaration # all uses in the declaration must refer to same type.</description></item><item><title>`removeAll`</title><link>https://bal.tips/docs/langlib/array/functions/removeAll/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/removeAll/</guid><description> removeAll # [üçé, üçá, üçå, üçì].removeAll() ‚ûú [] The removeAll function removes all members from a given list. The arr argument specifies the list to be emptied. The function panics if any member cannot be removed.
Examples # üöß More Details Coming Soon! Spec Definition # # Removes all members of an array. # + arr - the array # Panics if any member cannot be removed. public isolated function removeAll((any|error)[] arr) returns () = external; removeAll documentation&amp;nbsp;-&amp;nbsp; (source : ballerina spec)</description></item><item><title>`setLength`</title><link>https://bal.tips/docs/langlib/array/functions/setLength/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/setLength/</guid><description>setLength # [üçé, üçá, üçå, üçì].setLength(2) ‚ûú [üçé, üçá] The setLength function changes the length of a given list to a specified value. The arr argument specifies the list of which to change the length, and the length argument specifies the new length of the list.
Examples # üöß More Details Coming Soon! Spec Definition # # Changes the length of an array. # # + arr - the array of which to change the length # + length - new length # `setLength(arr, 0)` is equivalent to `removeAll(arr)`.</description></item><item><title>`indexOf`</title><link>https://bal.tips/docs/langlib/array/functions/indexOf/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/indexOf/</guid><description>indexOf # [üçé, üçá, üçå, üçì].indexOf(üçå) ‚ûú 2 The indexOf function returns the index of the first member of a given list that is equal to a specified value. The arr argument specifies the list to be searched, and the val argument specifies the value to search for. The startIndex argument specifies the index at which to start the search. The indexOf function returns the index of the first member that is equal to val, if there is one, and () otherwise.</description></item><item><title>`lastIndexOf`</title><link>https://bal.tips/docs/langlib/array/functions/lastIndexOf/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/lastIndexOf/</guid><description>lastIndexOf # [üçé, üçå, üçå, üçì].lastIndexOf(üçå) ‚ûú 2 The lastIndexOf function returns the index of the last member of a given list that is equal to a specified value. The arr argument specifies the list to be searched, and the val argument specifies the value to search for. The startIndex argument specifies the index at which to start searching backwards. The lastIndexOf function returns the index of the last member that is equal to val, if there is one, and () otherwise.</description></item><item><title>`reverse`</title><link>https://bal.tips/docs/langlib/array/functions/reverse/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/reverse/</guid><description>reverse # [üçé, üçá, üçå, üçì].reverse() ‚ûú [üçì, üçå, üçá, üçé] The reverse function reverses the order of the members in a given list. The arr argument specifies the list to be reversed. The function returns a new list containing the members of the original list in reverse order.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`. # Has the special semantic that when used in a declaration # all uses in the declaration must refer to same type.</description></item><item><title>`sort`</title><link>https://bal.tips/docs/langlib/array/functions/sort/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/sort/</guid><description>sort # [üçé, üçá, üçå, üçì].sort(byName) ‚ûú [üçé, üçå, üçá, üçì] The sort function sorts the members of a given list. The arr argument specifies the list to be sorted. The direction argument specifies the direction in which to sort the list, which can be either ASCENDING or DESCENDING. The key argument is an optional function that returns a key to use to sort the members.
If the member type of the list is not sortable, then the key function must be specified to extract a comparable key from each member.</description></item><item><title>`pop`</title><link>https://bal.tips/docs/langlib/array/functions/pop/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/pop/</guid><description>pop # [üçé, üçá, üçå, üçì].pop() ‚ûú üçì The pop function removes and returns the last member of a given list. The arr argument specifies the list from which to remove the last member. The function returns the removed member.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`. # Has the special semantic that when used in a declaration # all uses in the declaration must refer to same type.</description></item><item><title>`push`</title><link>https://bal.tips/docs/langlib/array/functions/push/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/push/</guid><description>push # [üçé, üçá, üçå, üçì].push(üçí, üçâ) ‚ûú [üçé, üçå, üçá, üçì, üçí, üçâ] The push function adds one or more values to the end of a given list. The arr argument specifies the list to which the values will be added, and the vals argument is a variable-length argument that can contain one or more values to add to the list.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`.</description></item><item><title>`shift`</title><link>https://bal.tips/docs/langlib/array/functions/shift/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/shift/</guid><description>shift # [üçé, üçá, üçå, üçì].shift() ‚ûú üçé The shift function removes and returns the first member of a given list. The arr argument specifies the list from which to remove the first member. The function returns the removed member.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`. # Has the special semantic that when used in a declaration # all uses in the declaration must refer to same type.</description></item><item><title>`unshift`</title><link>https://bal.tips/docs/langlib/array/functions/unshift/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/unshift/</guid><description>unshift # [üçé, üçá, üçå, üçì].unshift(üçí, üçâ) ‚ûú [üçí, üçâ, üçé, üçå, üçá, üçì] The unshift function adds one or more values to the start of a given list. The arr argument specifies the list to which the values will be added, and the vals argument is a variable-length argument that can contain one or more values to add to the list.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`.</description></item><item><title>`toBase64`</title><link>https://bal.tips/docs/langlib/array/functions/toBase64/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/toBase64/</guid><description>toBase64 # toBase64([72, 101, 108, 108, 111]) ‚ûú SGVsbG8= The toBase64 function returns a string that is the Base64 representation of an array of bytes. The arr argument specifies the array of bytes to be encoded.
The Base64 representation returned by the toBase64 function is the same as used by a Ballerina Base64Literal. The resulting string will contain only characters A..Z, a..z, 0..9, +, / and =, and there will be no whitespace in the returned string.</description></item><item><title>`fromBase64`</title><link>https://bal.tips/docs/langlib/array/functions/fromBase64/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/fromBase64/</guid><description>fromBase16 # fromBase64(&amp;quot;SGVsbG8=&amp;quot;) ‚ûú [72, 101, 108, 108, 111] The fromBase64 function returns the byte array that a string represents in Base64. The str argument specifies the Base64-encoded string to be decoded.
The str argument must consist of the characters A..Z, a..z, 0..9, +, / and =, and whitespace as allowed by a Ballerina Base64Literal.
Examples # üöß More Details Coming Soon! Spec Definition # # Returns the byte array that a string represents in Base64.</description></item><item><title>`toBase16`</title><link>https://bal.tips/docs/langlib/array/functions/toBase16/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/toBase16/</guid><description>toBase16 # toBase16([72, 101, 108, 108, 111]) ‚ûú 48656c6c6f The toBase16 function returns a string that represents the Base16 (hexadecimal) encoding of an array of bytes. The resulting string contains only characters 0..9 and a..f and has no whitespace.
Examples # üöß More Details Coming Soon! Spec Definition # # Returns the string that is the Base16 representation of an array of bytes. # The representation is the same as used by a Ballerina Base16Literal.</description></item><item><title>`fromBase16`</title><link>https://bal.tips/docs/langlib/array/functions/fromBase16/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/fromBase16/</guid><description>fromBase16 # fromBase16(&amp;quot;48656c6c6f=&amp;quot;) ‚ûú [72, 101, 108, 108, 111] The fromBase16 function takes a Base16 string as input and returns the corresponding byte array. The fromBase16 function assumes that the input string contains only characters 0..9, A..F, and a..f, and has no whitespace.
Examples # üöß More Details Coming Soon! Spec Definition # # Returns the byte array that a string represents in Base16. # `str` must consist of the characters `0.</description></item><item><title>`toStream `</title><link>https://bal.tips/docs/langlib/array/functions/toStream/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/array/functions/toStream/</guid><description>toStream # The toStream function takes a list as input and returns a stream that contains the members of the list. The toStream function is useful when you want to use the functional programming capabilities of Ballerina, such as filtering and mapping, with an array.
Examples # üöß More Details Coming Soon! Spec Definition # # A type parameter that is a subtype of `any|error`. # Has the special semantic that when used in a declaration # all uses in the declaration must refer to same type.</description></item><item><title>`fromString`</title><link>https://bal.tips/docs/langlib/boolean/functions/fromString/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/boolean/functions/fromString/</guid><description>fromString # # Converts a string to a boolean. # Returns the boolean of which `s` is a string representation. # The accepted representations are `true`, `false` # (in any combination of lower- and upper-case), # and also `1` for true and `0` for `false`. # This is the inverse of `value:toString` applied to a `boolean`. # # + s - string representing a boolean value # + return - boolean that `s` represents, or an error if there is no such boolean public isolated function fromString(string s) returns boolean|error = external; fromString documentation&amp;nbsp;-&amp;nbsp; (source : ballerina spec) 1import ballerina/io; 2 3public function main() returns error?</description></item><item><title>Int Lang Library</title><link>https://bal.tips/docs/langlib/int/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/langlib/int/</guid><description>Int Lang Library # lang.int Lang Library provides a set of functions that operates on an int value. See available operations in the ballerina/lang.int module.
Additionally, ballerina/lang.value Lang Library provides toString and another set of functions that can operate on an int value.
üí° int is a pre-defined module prefix and you can use it without an import declaration. 1import ballerina/io; 2 3public function main() returns error? { 4 5 int sum = int:sum(1, -2, 3, -4, 5); 6 int max = int:max(1, -2, 3, -4, 5); 7 int min = int:min(1, -2, 3, -4, 5); 8 int abs = min.</description></item><item><title>üîé Search</title><link>https://bal.tips/search/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>https://bal.tips/search/</guid><description/></item><item><title>üì∞ Ballerina Language News</title><link>https://bal.tips/news/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>https://bal.tips/news/</guid><description> üì∞ Ballerina Language News # News and updates related to Ballerina, such as new releases or upcoming events. (If page is not loading click following link.)
A Twitter List by HasithaAravinda</description></item><item><title>Ballerina Actions</title><link>https://bal.tips/docs/devops/github/ballerina-action/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/docs/devops/github/ballerina-action/</guid><description>Simplify Ballerina Workflow on GitHub with setup-ballerina Action # The post covers the use of the setup-ballerina GitHub Action to automate the installation of the Ballerina (Swan Lake) distribution in the GitHub Action environment.
The following code block shows how you can configure the GitHub Action to build your Ballerina project. You can find a working example of this in this repository.
The setup-ballerina GitHub Action v1 release requires a mandatory input of the Ballerina Swan Lake distribution version in the form of &amp;ldquo;Swan Lake channel&amp;rdquo; as listed in the bal dist list command.</description></item><item><title>Author</title><link>https://bal.tips/about/author/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/about/author/</guid><description># About Author
This page will redirect to the author's LinkedIn profile.</description></item><item><title>ballerina.io</title><link>https://bal.tips/about/ballerina/bio/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/about/ballerina/bio/</guid><description># Ballerina Website
This will redirect you to the Ballerina Website.</description></item><item><title>Language Spec</title><link>https://bal.tips/about/ballerina/spec/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/about/ballerina/spec/</guid><description># Ballerina Language Spec
This page will redirect to the Ballerina Language Spec website.</description></item><item><title>Ballerina By Example</title><link>https://bal.tips/about/ballerina/bbe/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/about/ballerina/bbe/</guid><description># Ballerina By Example
This page will redirect to the Ballerina By Example website.</description></item><item><title>Best Practices Guide</title><link>https://bal.tips/about/ballerina/bbg/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/about/ballerina/bbg/</guid><description># Ballerina Website
This will redirect you to the Ballerina best practices guide.</description></item><item><title>Github Repo</title><link>https://bal.tips/about/source/source/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/about/source/source/</guid><description># View Source of the Website
This page will redirect to the GitHub repository of the website.</description></item><item><title>Report Issue</title><link>https://bal.tips/about/source/report-issue/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://bal.tips/about/source/report-issue/</guid><description># Report an Issue
This page will redirect to the GitHub repository to create a new issue.</description></item><item><title>Licenses and Copyrights</title><link>https://bal.tips/copyrights/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>https://bal.tips/copyrights/</guid><description>Licenses and Copyrights # Bal.Tips Copyright ¬© 2022-2023 Hasitha Aravinda. All rights reserved.
Source and Content Licenses # Type Description License Content The Content under bal.tips website including the content of pages, posts etc. are licensed under a Creative Commons-NoDerivatives 4.0 International License by Hasitha Aravinda. Ballerina Sources (.bal files) All Ballerina Example Sources in this website are licensed under MIT License, unless explicitly mention in the top of the source code.</description></item></channel></rss>