[{"uri":"https://bal.tips/examples/helloworld/main/","title":"Hello, World!","tags":["hello-world","io:println"],"description":"","content":"Writing a simple Hello, World! is easy\u0026hellip;! Let\u0026rsquo;s write something to stdout first.\nmain.bal main.out 1 2 3 4 5 import ballerina/io; public function main() { io:println(\u0026#34;Hello, World...!\u0026#34;); } View Source (main.bal) 1 Hello, World...! View Source (main.out) How to run this example? Download main.bal file. Open the terminal and cd to the main.bal file location. There are two ways to run this. Execute it directly using bal run main.bal command. Build the executable jar file first using bal build main.bal. Then run it using bal run main.jar "},{"uri":"https://bal.tips/helloworld/","title":"Hello, World!","tags":["hello-world"],"description":"","content":"This Collection contains various Hello, World! examples written in Ballerina\nHello, World! hello-world io:println Writing a simple Hello, World! is easy\u0026hellip;! Let\u0026rsquo;s write something to stdout first.\nmain.bal main.out 1 2 3 4 5 import ballerina/io; public function main() { io:println(\u0026#34;Hello, World...!\u0026#34;); } View Source (main.bal) 1 Hello, World...! View Source (main.out) How to run this example? Download main.bal file. Open the terminal and cd to the main.bal file location. There are two ways to run this. Execute it directly using bal run main.bal command. Build the executable jar file first using bal build main.bal. Then run it using bal run main.jar Hello World API hello-world http:service Let\u0026rsquo;s create a Hello, World HTTP API. This API will accept HTTP get request at http://localhost:8080/greeting. I will use ballerina/http module to implement this API.\nservice.bal 1 2 3 4 5 6 7 8 9 10 11 import ballerina/http; service on new http:Listener(8080) { resource function get greeting(string? name) returns json { if name == () { return {\u0026#34;content\u0026#34;: \u0026#34;Hello, World!\u0026#34;}; } string content = string `Hello, ${name}!`; return {\u0026#34;content\u0026#34;: content}; } } View Source (service.bal) How to run this example? Download service.bal file and start the program using bal run service.bal command. Visit http://localhost:8080/greeting. You will see {\u0026quot;content\u0026quot;:\u0026quot;Hello, World!\u0026quot;} JSON output. Now let\u0026rsquo;s try providing a value to the name query parameter. Visit http://localhost:8080/greeting?name=Ballerina. You will see {\u0026quot;content\u0026quot;:\u0026quot;Hello, Ballerina!\u0026quot;} JSON output. "},{"uri":"https://bal.tips/types/","title":"Ballerina Type Guide","tags":[],"description":"","content":"This series covers Ballerina type system.\nNil - () The nil basic data type represents A single value, that represents absence of any other value.\nBoolean The boolean basic data type represents Boolean values; true, false.\nInt The int basic data type represents 64-bit signed integer values.\nFloat The float basic data type represents 64-bit IEEE 754-2008 binary floating point numbers.\nThis page is under construction. The page content is updated dynamically and may change in the future including the structure. Refer with caution.\n"},{"uri":"https://bal.tips/learn-syntax/","title":"Ballerina Syntax Guide","tags":[],"description":"","content":"In this series, Let\u0026rsquo;s see various Ballerina syntax.\nLiterals Writing Literals\nThis page is under construction. The page content is updated dynamically and may change in the future including the structure. Refer with caution.\n"},{"uri":"https://bal.tips/examples/","title":"All Ballerina Examples","tags":[],"description":"","content":" Hello, World! Writing a Simple Hello World\nNil Literal Writing an nil value\nBoolean Literal Writing a boolean literal\nInteger Literal Writing an integer literal\nHexadecimal Integer Literal Writing a hexadecimal integer literal\nFloat Literal Writing a float literal\nFloat Literal With Exponent Writing a float literal in scientific notation\nHello World API Writing a Simple HTTP Hello World API\n"},{"uri":"https://bal.tips/types/simple/nil/","title":"Nil - ()","tags":["nil"],"description":"","content":"The nil basic data type represents A single value, that represents absence of any other value.\nNil Literal literal nil null The nil basic type has only a single value called nil. So, both the type and the value use the syntax ().\nFor JSON compatibility you can also write it as null. This will help you to copy and paste JSON values as expressions in the code. But avoid using null in non-JSON-related places.\nnil-literal.bal nil-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import ballerina/io; public function main() { () a = (); () b = null; null c = null; // Also valid io:println(\u0026#34;a:\u0026#34;, a); io:println(\u0026#34;b:\u0026#34;, b); io:println(\u0026#34;c:\u0026#34;, c); // Using JSON value as expr json tom = {\u0026#34;name\u0026#34; : \u0026#34;tom\u0026#34;, \u0026#34;job\u0026#34; : null}; json bob = {\u0026#34;name\u0026#34; : \u0026#34;bob\u0026#34;, \u0026#34;job\u0026#34; : ()}; io:println(\u0026#34;person:\u0026#34;, tom); io:println(\u0026#34;person:\u0026#34;, bob); } View Source (nil-literal.bal) 1 2 3 4 5 a: b: c: person:{\u0026#34;name\u0026#34;:\u0026#34;tom\u0026#34;,\u0026#34;job\u0026#34;:null} person:{\u0026#34;name\u0026#34;:\u0026#34;bob\u0026#34;,\u0026#34;job\u0026#34;:null} View Source (nil-literal.out) "},{"uri":"https://bal.tips/examples/expr/literals/nil-literal/","title":"Nil Literal","tags":["literal","nil","null"],"description":"","content":"The nil basic type has only a single value called nil. So, both the type and the value use the syntax ().\nFor JSON compatibility you can also write it as null. This will help you to copy and paste JSON values as expressions in the code. But avoid using null in non-JSON-related places.\nnil-literal.bal nil-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import ballerina/io; public function main() { () a = (); () b = null; null c = null; // Also valid io:println(\u0026#34;a:\u0026#34;, a); io:println(\u0026#34;b:\u0026#34;, b); io:println(\u0026#34;c:\u0026#34;, c); // Using JSON value as expr json tom = {\u0026#34;name\u0026#34; : \u0026#34;tom\u0026#34;, \u0026#34;job\u0026#34; : null}; json bob = {\u0026#34;name\u0026#34; : \u0026#34;bob\u0026#34;, \u0026#34;job\u0026#34; : ()}; io:println(\u0026#34;person:\u0026#34;, tom); io:println(\u0026#34;person:\u0026#34;, bob); } View Source (nil-literal.bal) 1 2 3 4 5 a: b: c: person:{\u0026#34;name\u0026#34;:\u0026#34;tom\u0026#34;,\u0026#34;job\u0026#34;:null} person:{\u0026#34;name\u0026#34;:\u0026#34;bob\u0026#34;,\u0026#34;job\u0026#34;:null} View Source (nil-literal.out) "},{"uri":"https://bal.tips/types/simple/boolean/","title":"Boolean","tags":["boolean"],"description":"","content":"The boolean basic data type represents Boolean values; true, false.\nBoolean Literal literal boolean The boolean basic type has only two values; boolean true is written as true and boolean false is written as false.\nBallerina doesn\u0026rsquo;t support 0, 1 or any other variations of true or false words as alternative syntax.\nboolean-literal.bal boolean-literal.out 1 2 3 4 5 6 7 8 9 import ballerina/io; public function main() { boolean enable = true; boolean open = false; io:println(enable); // true io:println(open); // false } View Source (boolean-literal.bal) 1 2 true false View Source (boolean-literal.out) "},{"uri":"https://bal.tips/examples/expr/literals/boolean-literal/","title":"Boolean Literal","tags":["literal","boolean"],"description":"","content":"The boolean basic type has only two values; boolean true is written as true and boolean false is written as false.\nBallerina doesn\u0026rsquo;t support 0, 1 or any other variations of true or false words as alternative syntax.\nboolean-literal.bal boolean-literal.out 1 2 3 4 5 6 7 8 9 import ballerina/io; public function main() { boolean enable = true; boolean open = false; io:println(enable); // true io:println(open); // false } View Source (boolean-literal.bal) 1 2 true false View Source (boolean-literal.out) "},{"uri":"https://bal.tips/types/simple/int/","title":"Int","tags":["int"],"description":"","content":"The int basic data type represents 64-bit signed integer values.\nInteger Literal literal int You can write integer values using a set of digits of the decimal system (Base 10 number) numbers. Digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9\nYou can make an integer value negative by writing a minus (-) sign in front of the literal. See Unary Expressions for more details.\nint-literal.bal int-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0; int i2 = -10; int i3 = 100; int i4 = -100000; int i5 = 1234567890; io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } View Source (int-literal.bal) 1 2 3 4 5 0 -10 100 -100000 1234567890 View Source (int-literal.out) Hexadecimal Integer Literal literal int hex You can also write an integer using the Hexadecimal (Base 16 number) numeral system.\nHexadecimal numbers start with a Hex Indicator 0x (Number zero and lowercase letter x) or 0X (Number zero and Uppercase letter X) Hex digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a or A, b or B, c or C, d or D, e or E, f or F\nint-literal-hex.bal int-literal-hex.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0x0; // 0; int i2 = 0xa; // 10; int i3 = 0xA; // 10; int i4 = -0xa1b2; // -41394 int i5 = 0XAb; // 171 io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } View Source (int-literal-hex.bal) 1 2 3 4 5 0 10 10 -41394 171 View Source (int-literal-hex.out) "},{"uri":"https://bal.tips/examples/expr/literals/int-literal/","title":"Integer Literal","tags":["literal","int"],"description":"","content":"You can write integer values using a set of digits of the decimal system (Base 10 number) numbers. Digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9\nYou can make an integer value negative by writing a minus (-) sign in front of the literal. See Unary Expressions for more details.\nint-literal.bal int-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0; int i2 = -10; int i3 = 100; int i4 = -100000; int i5 = 1234567890; io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } View Source (int-literal.bal) 1 2 3 4 5 0 -10 100 -100000 1234567890 View Source (int-literal.out) "},{"uri":"https://bal.tips/examples/expr/literals/int-literal-hex/","title":"Hexadecimal Integer Literal","tags":["literal","int","hex"],"description":"","content":"You can also write an integer using the Hexadecimal (Base 16 number) numeral system.\nHexadecimal numbers start with a Hex Indicator 0x (Number zero and lowercase letter x) or 0X (Number zero and Uppercase letter X) Hex digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a or A, b or B, c or C, d or D, e or E, f or F\nint-literal-hex.bal int-literal-hex.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0x0; // 0; int i2 = 0xa; // 10; int i3 = 0xA; // 10; int i4 = -0xa1b2; // -41394 int i5 = 0XAb; // 171 io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } View Source (int-literal-hex.bal) 1 2 3 4 5 0 10 10 -41394 171 View Source (int-literal-hex.out) "},{"uri":"https://bal.tips/types/simple/float/","title":"Float","tags":["float"],"description":"","content":"The float basic data type represents 64-bit IEEE 754-2008 binary floating point numbers.\nFloat Literal literal float You can write floating point values using a set of digits of the decimal system (Base 10 number) numbers, by using a dot . as the radix character to separate integer-part and fractional-part.\nOptionally you can write float-type-suffix character f or F precisely to say this numerical literal is a float value.\nDigits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9. You can make a float value negative by writing a minus (-) sign in front of the literal. See Unary Expressions for more details.\nfloat-literal.bal float-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import ballerina/io; public function main() { float f1 = 12.345; float f2 = -5.678; float f3 = .5678; float f4 = 123.456f; float f5 = 567.8901F; float f6 = 505f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); } View Source (float-literal.bal) 1 2 3 4 5 6 12.345 -5.678 0.5678 123.456 567.8901 505.0 View Source (float-literal.out) Float Literal With Exponent literal float exponent You can write floating numbers using scientific notation. Letter e or E is used as the exponent indicator.\nfloat-exp-literal.bal float-exp-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { float f1 = 12e4; // 120000.0 float f2 = 543e-5; // 0.00543 float f3 = 1.23e3; // 1230.0 float f4 = 1.23e3f; // 1230.0 io:println(f1); io:println(f2); io:println(f3); io:println(f4); } View Source (float-exp-literal.bal) 1 2 3 4 120000.0 0.00543 1230.0 1230.0 View Source (float-exp-literal.out) "},{"uri":"https://bal.tips/examples/expr/literals/float-literal/","title":"Float Literal","tags":["literal","float"],"description":"","content":"You can write floating point values using a set of digits of the decimal system (Base 10 number) numbers, by using a dot . as the radix character to separate integer-part and fractional-part.\nOptionally you can write float-type-suffix character f or F precisely to say this numerical literal is a float value.\nDigits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9. You can make a float value negative by writing a minus (-) sign in front of the literal. See Unary Expressions for more details.\nfloat-literal.bal float-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import ballerina/io; public function main() { float f1 = 12.345; float f2 = -5.678; float f3 = .5678; float f4 = 123.456f; float f5 = 567.8901F; float f6 = 505f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); } View Source (float-literal.bal) 1 2 3 4 5 6 12.345 -5.678 0.5678 123.456 567.8901 505.0 View Source (float-literal.out) "},{"uri":"https://bal.tips/examples/expr/literals/float-exp-literal/","title":"Float Literal With Exponent","tags":["literal","float","exponent"],"description":"","content":"You can write floating numbers using scientific notation. Letter e or E is used as the exponent indicator.\nfloat-exp-literal.bal float-exp-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { float f1 = 12e4; // 120000.0 float f2 = 543e-5; // 0.00543 float f3 = 1.23e3; // 1230.0 float f4 = 1.23e3f; // 1230.0 io:println(f1); io:println(f2); io:println(f3); io:println(f4); } View Source (float-exp-literal.bal) 1 2 3 4 120000.0 0.00543 1230.0 1230.0 View Source (float-exp-literal.out) "},{"uri":"https://bal.tips/examples/helloworld/http/service/","title":"Hello World API","tags":["hello-world","http:service"],"description":"","content":"Let\u0026rsquo;s create a Hello, World HTTP API. This API will accept HTTP get request at http://localhost:8080/greeting. I will use ballerina/http module to implement this API.\nservice.bal 1 2 3 4 5 6 7 8 9 10 11 import ballerina/http; service on new http:Listener(8080) { resource function get greeting(string? name) returns json { if name == () { return {\u0026#34;content\u0026#34;: \u0026#34;Hello, World!\u0026#34;}; } string content = string `Hello, ${name}!`; return {\u0026#34;content\u0026#34;: content}; } } View Source (service.bal) How to run this example? Download service.bal file and start the program using bal run service.bal command. Visit http://localhost:8080/greeting. You will see {\u0026quot;content\u0026quot;:\u0026quot;Hello, World!\u0026quot;} JSON output. Now let\u0026rsquo;s try providing a value to the name query parameter. Visit http://localhost:8080/greeting?name=Ballerina. You will see {\u0026quot;content\u0026quot;:\u0026quot;Hello, Ballerina!\u0026quot;} JSON output. "},{"uri":"https://bal.tips/tags/boolean/","title":"boolean","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/float/","title":"float","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/int/","title":"int","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/nil/","title":"nil","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/exponent/","title":"exponent","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/literal/","title":"literal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/hex/","title":"hex","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/null/","title":"null","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/hello-world/","title":"hello-world","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/httpservice/","title":"http:service","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/ioprintln/","title":"io:println","tags":[],"description":"","content":""},{"uri":"https://bal.tips/learn-syntax/literals/","title":"Literals","tags":["literal"],"description":"","content":"This section covers Literals of the Ballerina Language spec.\nNil Literal literal nil null The nil basic type has only a single value called nil. So, both the type and the value use the syntax ().\nFor JSON compatibility you can also write it as null. This will help you to copy and paste JSON values as expressions in the code. But avoid using null in non-JSON-related places.\nnil-literal.bal nil-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import ballerina/io; public function main() { () a = (); () b = null; null c = null; // Also valid io:println(\u0026#34;a:\u0026#34;, a); io:println(\u0026#34;b:\u0026#34;, b); io:println(\u0026#34;c:\u0026#34;, c); // Using JSON value as expr json tom = {\u0026#34;name\u0026#34; : \u0026#34;tom\u0026#34;, \u0026#34;job\u0026#34; : null}; json bob = {\u0026#34;name\u0026#34; : \u0026#34;bob\u0026#34;, \u0026#34;job\u0026#34; : ()}; io:println(\u0026#34;person:\u0026#34;, tom); io:println(\u0026#34;person:\u0026#34;, bob); } View Source (nil-literal.bal) 1 2 3 4 5 a: b: c: person:{\u0026#34;name\u0026#34;:\u0026#34;tom\u0026#34;,\u0026#34;job\u0026#34;:null} person:{\u0026#34;name\u0026#34;:\u0026#34;bob\u0026#34;,\u0026#34;job\u0026#34;:null} View Source (nil-literal.out) Boolean Literal literal boolean The boolean basic type has only two values; boolean true is written as true and boolean false is written as false.\nBallerina doesn\u0026rsquo;t support 0, 1 or any other variations of true or false words as alternative syntax.\nboolean-literal.bal boolean-literal.out 1 2 3 4 5 6 7 8 9 import ballerina/io; public function main() { boolean enable = true; boolean open = false; io:println(enable); // true io:println(open); // false } View Source (boolean-literal.bal) 1 2 true false View Source (boolean-literal.out) Integer Literal literal int You can write integer values using a set of digits of the decimal system (Base 10 number) numbers. Digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9\nYou can make an integer value negative by writing a minus (-) sign in front of the literal. See Unary Expressions for more details.\nint-literal.bal int-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0; int i2 = -10; int i3 = 100; int i4 = -100000; int i5 = 1234567890; io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } View Source (int-literal.bal) 1 2 3 4 5 0 -10 100 -100000 1234567890 View Source (int-literal.out) Hexadecimal Integer Literal literal int hex You can also write an integer using the Hexadecimal (Base 16 number) numeral system.\nHexadecimal numbers start with a Hex Indicator 0x (Number zero and lowercase letter x) or 0X (Number zero and Uppercase letter X) Hex digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a or A, b or B, c or C, d or D, e or E, f or F\nint-literal-hex.bal int-literal-hex.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0x0; // 0; int i2 = 0xa; // 10; int i3 = 0xA; // 10; int i4 = -0xa1b2; // -41394 int i5 = 0XAb; // 171 io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } View Source (int-literal-hex.bal) 1 2 3 4 5 0 10 10 -41394 171 View Source (int-literal-hex.out) Float Literal literal float You can write floating point values using a set of digits of the decimal system (Base 10 number) numbers, by using a dot . as the radix character to separate integer-part and fractional-part.\nOptionally you can write float-type-suffix character f or F precisely to say this numerical literal is a float value.\nDigits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9. You can make a float value negative by writing a minus (-) sign in front of the literal. See Unary Expressions for more details.\nfloat-literal.bal float-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import ballerina/io; public function main() { float f1 = 12.345; float f2 = -5.678; float f3 = .5678; float f4 = 123.456f; float f5 = 567.8901F; float f6 = 505f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); } View Source (float-literal.bal) 1 2 3 4 5 6 12.345 -5.678 0.5678 123.456 567.8901 505.0 View Source (float-literal.out) Float Literal With Exponent literal float exponent You can write floating numbers using scientific notation. Letter e or E is used as the exponent indicator.\nfloat-exp-literal.bal float-exp-literal.out 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { float f1 = 12e4; // 120000.0 float f2 = 543e-5; // 0.00543 float f3 = 1.23e3; // 1230.0 float f4 = 1.23e3f; // 1230.0 io:println(f1); io:println(f2); io:println(f3); io:println(f4); } View Source (float-exp-literal.bal) 1 2 3 4 120000.0 0.00543 1230.0 1230.0 View Source (float-exp-literal.out) "},{"uri":"https://bal.tips/_footer/","title":"","tags":[],"description":"","content":"Bal.tips 2022 Hasitha Aravinda. Built using docdock and Hugo\n"},{"uri":"https://bal.tips/_header/","title":"","tags":[],"description":"","content":" 💡 Ballerina Tips "},{"uri":"https://bal.tips/_menu-footer/","title":"","tags":[],"description":"","content":" About All Examples Thank you Copyright About Author Website Source Report an Issue Links Ballerina.io Ballerina By Examples Ballerina Language Specification Bal.tips - A Blog by Hasitha Aravinda.\n"},{"uri":"https://bal.tips/","title":"💡 Ballerina Tips","tags":[],"description":"","content":" "},{"uri":"https://bal.tips/copyright/","title":"Copyright","tags":[],"description":"","content":"Content This work including the content of pages, tips etc. is licensed under a Creative Commons Attribution-NoDerivatives 4.0 International License by Hasitha Aravinda.\nAll Ballerina Example Source in this website are licensed under MIT License, unless explicitly mention in the top of the source code.\nTerms and Trademarks Ballerina Ballerina is an open-source programming language for the cloud that makes it easier to use, combine, and create network services - ballerina.io\nBallerina is a trademark of WSO2, Inc. All other marks and logos are property of their respective owners.\nImages and Figures The Mascot image is from Robot chatbot vector created by upklyak - www.freepik.com. See their work here. "},{"uri":"https://bal.tips/thankyou/","title":"Thank you","tags":[],"description":"","content":"When I built this website, I was inspired by multiple Hugo themes. I built this re-using and modifying some of the Hugo themes content. Thank you original authors for their hard work and for making this website simple, clean, and beautiful.\nPrimary Theme - hugo-theme-docdock by vjeantet MIT license. Short Codes inspirations Tabs from hugo-theme-learn by matcornic - MIT license. hugo-book by alex-shpak - MIT license. "}]