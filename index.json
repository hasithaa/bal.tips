[{"uri":"https://bal.tips/examples/helloworld/main/","title":"Hello, World!","tags":["hello-world","io:println"],"description":"","content":" Fallback text here for unsupporting browsers, of which there are scant few. Open Slides Source Code main.bal 1 2 3 4 5 6 import ballerina/io; public function main() { io:println(\u0026#34;üëãüåè\u0026#34;); io:println(\u0026#34;Hello, World...!\u0026#34;); } bal run main.bal 1 2 üëãüåè Hello, World...! Ballerina 2201.1.1 - View Source How to run this example? Download main.bal file. Open the terminal and cd to the main.bal file location. There are two ways to run this. Execute it directly using bal run main.bal command. Build the executable jar file first using bal build main.bal. Then run it using bal run main.jar "},{"uri":"https://bal.tips/helloworld/","title":"Hello, World!","tags":["hello-world"],"description":"","content":"This Collection contains various Hello, World! examples written in Ballerina\nRelated Tips üí°\u0026nbsp;Hello, World! üí°\u0026nbsp;Hello World API üí°\u0026nbsp;\u0026nbsp;Hello, World! Let\u0026rsquo;s write \u0026lsquo;Hello, World!\u0026rsquo; to stdout.\nmain.bal 1 2 3 4 5 6 import ballerina/io; public function main() { io:println(\u0026#34;üëãüåè\u0026#34;); io:println(\u0026#34;Hello, World...!\u0026#34;); } bal run main.bal 1 2 üëãüåè Hello, World...! Ballerina 2201.1.1 - View Source hello-world io:println \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Hello World API Let\u0026rsquo;s create a Hello, World HTTP API. This API will accept HTTP get request at http://localhost:8080/greeting.\nservice.bal 1 2 3 4 5 6 7 8 9 10 11 import ballerina/http; service on new http:Listener(8080) { resource function get greeting(string? name) returns json { if name == () { return {\u0026#34;content\u0026#34;: \u0026#34;Hello, World!\u0026#34;}; } string content = string `Hello, ${name}!`; return {\u0026#34;content\u0026#34;: content}; } } bal run service.bal Ballerina 2201.1.1 - View Source hello-world http:service \u0026nbsp;See more "},{"uri":"https://bal.tips/types/","title":"Ballerina Type Guide","tags":[],"description":"","content":"This collection covers Ballerina type system.\nNil - () The nil basic data type represents A single value, that represents absence of any other value.\nBoolean The boolean basic data type represents Boolean values; true, false.\nInt The int basic data type represents 64-bit signed integer values.\nFloat The float basic data type represents 64-bit IEEE 754-2008 binary floating point numbers.\nDecimal The decimal basic data type represents 128-bit IEEE 754-2008 decimal floating point values.\nString The string data type represents sequence of zero of more unicode characters.\nByte byte type is built-in union type, that includes int values between 0 and 255 inclusive. (0 ‚â§ values ‚â§ 255).\nThis page is under construction. The page content is updated dynamically and may change in the future including the structure. Refer with caution.\n"},{"uri":"https://bal.tips/learn-syntax/","title":"Ballerina Syntax Guide","tags":[],"description":"","content":"Let\u0026rsquo;s see various Ballerina syntaxes.\nLiterals Ballerina Language Specification defines several Literals\u0026nbsp; syntaxes.\nTemplate Expressions Template Syntax uses two ` backtick letters to enclose a string with interpolated expressions. There are several variations of the Template Expressions\u0026nbsp; defined in the Language Specification.\nThis page is under construction. The page content is updated dynamically and may change in the future including the structure. Refer with caution.\n"},{"uri":"https://bal.tips/examples/","title":"All Ballerina Examples","tags":[],"description":"","content":" Hello, World! Nil Literal Null Literal Boolean Literal Integer Literal Hexadecimal Integer Literal Floating Point Literal Floating Point Literal With Exponent Hexadecimal Float Literal String Literal String Escape Chars Numbers Are Immutable Numerical Operations Converting Numerical Values Type of a numeric literal Base16 Byte Array Literal Base64 Byte Array Literal String Templates Hello World API lang.int Lang Library Byte - Ballerina vs Java Let\u0026#39;s Write a Hello, World! "},{"uri":"https://bal.tips/types/simple/nil/","title":"Nil - ()","tags":["nil"],"description":"","content":"The nil basic data type represents A single value, that represents absence of any other value.\nRelated Tips üí°\u0026nbsp;Nil Literal üí°\u0026nbsp;Null Literal üí°\u0026nbsp;\u0026nbsp;Nil Literal The nil basic type has only a single value called nil. So, both the type and the value use the syntax ().\nnil-literal.bal 1 2 3 4 5 6 7 import ballerina/io; public function main() { () a = (); io:println(\u0026#34;a:\u0026#34;, a); } bal run nil-literal.bal 1 a: Ballerina 2201.1.1 - View Source literal nil-literal nil \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Null Literal For JSON compatibility you can also write () as null. This will help you to copy and paste JSON values as expressions in the code. But avoid using null in non-JSON-related places.\nnull-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import ballerina/io; public function main() { () a = null; null b = null; // Also valid io:println(\u0026#34;a:\u0026#34;, a); io:println(\u0026#34;b:\u0026#34;, b); // Using JSON value as expr json tom = {\u0026#34;name\u0026#34; : \u0026#34;tom\u0026#34;, \u0026#34;job\u0026#34; : null}; json bob = {\u0026#34;name\u0026#34; : \u0026#34;bob\u0026#34;, \u0026#34;job\u0026#34; : ()}; io:println(\u0026#34;person:\u0026#34;, tom); io:println(\u0026#34;person:\u0026#34;, bob); } bal run null-literal.bal 1 2 3 4 a: b: person:{\u0026#34;name\u0026#34;:\u0026#34;tom\u0026#34;,\u0026#34;job\u0026#34;:null} person:{\u0026#34;name\u0026#34;:\u0026#34;bob\u0026#34;,\u0026#34;job\u0026#34;:null} Ballerina 2201.1.1 - View Source literal nil-literal nil null \u0026nbsp;See more "},{"uri":"https://bal.tips/examples/expr/literals/nil-literal/","title":"Nil Literal","tags":["literal","nil-literal","nil"],"description":"","content":"The nil basic type has only a single value called nil. So, both the type and the value use the syntax ().\nnil-literal.bal 1 2 3 4 5 6 7 import ballerina/io; public function main() { () a = (); io:println(\u0026#34;a:\u0026#34;, a); } bal run nil-literal.bal 1 a: Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/examples/expr/literals/null-literal/","title":"Null Literal","tags":["literal","nil-literal","nil","null"],"description":"","content":"For JSON compatibility you can also write () as null. This will help you to copy and paste JSON values as expressions in the code. But avoid using null in non-JSON-related places.\nnull-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import ballerina/io; public function main() { () a = null; null b = null; // Also valid io:println(\u0026#34;a:\u0026#34;, a); io:println(\u0026#34;b:\u0026#34;, b); // Using JSON value as expr json tom = {\u0026#34;name\u0026#34; : \u0026#34;tom\u0026#34;, \u0026#34;job\u0026#34; : null}; json bob = {\u0026#34;name\u0026#34; : \u0026#34;bob\u0026#34;, \u0026#34;job\u0026#34; : ()}; io:println(\u0026#34;person:\u0026#34;, tom); io:println(\u0026#34;person:\u0026#34;, bob); } bal run null-literal.bal 1 2 3 4 a: b: person:{\u0026#34;name\u0026#34;:\u0026#34;tom\u0026#34;,\u0026#34;job\u0026#34;:null} person:{\u0026#34;name\u0026#34;:\u0026#34;bob\u0026#34;,\u0026#34;job\u0026#34;:null} Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/types/simple/boolean/","title":"Boolean","tags":["boolean"],"description":"","content":"The boolean basic data type represents Boolean values; true, false.\nIn programming, boolean data type is useful to represent a binary state like, 1/0, On/Off, Yes/No or True/False etc.\nRelated Tips üí°\u0026nbsp;Boolean Literal üí°\u0026nbsp;\u0026nbsp;Boolean Literal The boolean basic type has only two values; boolean true is written as true and boolean false is written as false.\nboolean-literal.bal 1 2 3 4 5 6 7 8 9 import ballerina/io; public function main() { boolean enable = true; boolean open = false; io:println(enable); io:println(open); } bal run boolean-literal.bal 1 2 true false Ballerina 2201.1.1 - View Source literal boolean-literal boolean \u0026nbsp;See more "},{"uri":"https://bal.tips/examples/expr/literals/boolean-literal/","title":"Boolean Literal","tags":["literal","boolean-literal","boolean"],"description":"","content":"The boolean basic type has only two values; boolean true is written as true and boolean false is written as false.\nBallerina doesn\u0026rsquo;t support 0, 1 or any other variations of true or false words as alternative syntax.\nboolean-literal.bal 1 2 3 4 5 6 7 8 9 import ballerina/io; public function main() { boolean enable = true; boolean open = false; io:println(enable); io:println(open); } bal run boolean-literal.bal 1 2 true false Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/types/simple/int/","title":"Int","tags":["int"],"description":"","content":"The int basic data type represents 64-bit signed integer values.\nRelated Tips üí°\u0026nbsp;Integer Literal üí°\u0026nbsp;Hexadecimal Integer Literal üí°\u0026nbsp;Numbers Are Immutable üí°\u0026nbsp;Numerical Operations üí°\u0026nbsp;Converting Numerical Values üí°\u0026nbsp;Type of a numeric literal üí°\u0026nbsp;lang.int Lang Library üí°\u0026nbsp;\u0026nbsp;Integer Literal You can write integer values using a set of digits of the decimal system (Base 10 number) numbers. Digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9\nint-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0; int i2 = -10; int i3 = 100; int i4 = -100000; int i5 = 1234567890; io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } bal run int-literal.bal 1 2 3 4 5 0 -10 100 -100000 1234567890 Ballerina 2201.1.1 - View Source literal numeric-literal int \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Hexadecimal Integer Literal You can also write an integer using the Hexadecimal (Base 16 number) numeral system.\nint-literal-hex.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0x0; int i2 = 0xa; int i3 = 0xA; int i4 = -0xa1b2; int i5 = 0XAb; io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } bal run int-literal-hex.bal 1 2 3 4 5 0 10 10 -41394 171 Ballerina 2201.1.1 - View Source literal numeric-literal int hex \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Numbers Are Immutable Numerical value don\u0026rsquo;t have a storage identity, hence they are Inherently immutable (once created, it can\u0026rsquo;t be change the content of the value).\nNumbers are assignable to a readonly variable.\nnumerical.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import ballerina/io; public function main() { int i = 10; float f = 2.1; decimal d = 5.0; readonly r1 = i; readonly r2 = f; readonly r3 = d; io:println(i is readonly); io:println(f is readonly); io:println(d is readonly); io:println(r1); io:println(r2); io:println(r3); } bal run numerical.bal 1 2 3 4 5 6 true true true 10 2.1 5.0 Ballerina 2201.1.1 - View Source int float decimal readonly üí°\u0026nbsp;\u0026nbsp;Numerical Operations int,float,decimal values support multiple operators;\nMultiplicative ( *, /, % ) Additive (+, -) Relational Operations ( \u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;=) Equality ( ==, !=, ===, !===) Additionally, int type supports following operations\nShift Operations ( \u0026lt;\u0026lt;,\u0026gt;\u0026gt;, \u0026gt;\u0026gt;\u0026gt;) Binary bitwise (\u0026amp;, ^, |) Range Operator ( x ... y ) See each section for more tips.\nRuntime will panic on integer overflow or on division by zero.\nint float decimal expr üí°\u0026nbsp;\u0026nbsp;Converting Numerical Values Unlike some programming languages, there is no implicit conversion between Ballerina numerical types.\nint-float-error.bal int-decimal-error.bal float-decimal-error.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { int i = 10; float f = 2.1; int i1 = f; // ^ Error int i2 = \u0026lt;int\u0026gt; f; // OK float f1 = i; // ^ Error float f2 = \u0026lt;float\u0026gt; i; // OK } bal run int-float-error.bal Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { int i = 10; decimal d = 5.0; int i1 = d; // ^ Error int i2 = \u0026lt;int\u0026gt; d; // OK decimal d1 = i; // ^ Error decimal d2 = \u0026lt;decimal\u0026gt; i; // OK } bal run int-decimal-error.bal Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { float f = 2.1; decimal d = 5.0; float f1 = d; // ^ Error float f2 = \u0026lt;float\u0026gt; d; // OK decimal d1 = f; // ^ Error decimal d2 = \u0026lt;decimal\u0026gt; f; // OK } bal run float-decimal-error.bal Ballerina 2201.1.1 - View Source int float decimal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Type of a numeric literal A value written in a numeric-literal always represents a precise type, which is the singleton type that the literal represents. The broad type of the literal always belongs only to one of the basic types int, float, or decimal.\nFor example, the type of literal 10 is integer 10, and its broad type is int. This is not always true. Depending on the context, literal 10 can represent floating point value 10.0 or decimal value 10.\nnumeric-literals.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; const int TEN = 10; public function main() { var a1 = 10; TEN a2 = 10; float a3 = 10; decimal a4 = 10; float|decimal a5 = 10; var a6 = 10.0; io:println(a1 is int); io:println(a2 is TEN); io:println(a3); io:println(a4); io:println(a5 is float); io:println(a6 is float); } bal run numeric-literals.bal 1 2 3 4 5 6 true true 10.0 10 true true Ballerina 2201.1.1 - View Source literal numeric-literal int float decimal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;lang.int Lang Library lang.int Lang Library provides a set of functions that operates on an integer value. See available operations in ballerina/lang.int\u0026nbsp; module.\nintro.bal 1 2 3 4 5 6 7 8 9 10 11 12 import ballerina/io; public function main() returns error? { int sum = int:sum(1, 2, 3, 4, 5); io:println(sum); int max = int:max(1, 2, 3, 4, 5); io:println(max); int i = check int:fromString(\u0026#34;123\u0026#34;); io:println(i); } bal run intro.bal 1 2 3 15 5 123 Ballerina 2201.1.1 - View Source int lang.int "},{"uri":"https://bal.tips/examples/expr/literals/int-literal/","title":"Integer Literal","tags":["literal","numeric-literal","int"],"description":"","content":"You can write integer values using a set of digits of the decimal system (Base 10 number) numbers. Digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9\nYou can make an integer value negative by writing a minus (-) sign in front of the literal. See Unary Expressions for more details.\nint-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0; int i2 = -10; int i3 = 100; int i4 = -100000; int i5 = 1234567890; io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } bal run int-literal.bal 1 2 3 4 5 0 -10 100 -100000 1234567890 Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/examples/expr/literals/int-literal-hex/","title":"Hexadecimal Integer Literal","tags":["literal","numeric-literal","int","hex"],"description":"","content":"You can also write an integer using the Hexadecimal (Base 16 number) numeral system.\nHexadecimal numbers start with a Hex Indicator 0x (Number zero and lowercase letter x) or 0X (Number zero and Uppercase letter X) Hex digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a or A, b or B, c or C, d or D, e or E, f or F\nint-literal-hex.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0x0; int i2 = 0xa; int i3 = 0xA; int i4 = -0xa1b2; int i5 = 0XAb; io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } bal run int-literal-hex.bal 1 2 3 4 5 0 10 10 -41394 171 Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/examples/expr/literals/float-literal/","title":"Floating Point Literal","tags":["literal","numeric-literal","float","decimal"],"description":"","content":"There are two floating point types, float and decimal. Both use the same decimal number (Base 10 number) literal syntax.\nYou can write floating point values using a set of digits of the decimal system (Base 10 number) numbers, by using a dot . as the radix character to separate integer-part and fractional-part.\nOptionally you can write float-type-suffix character f or F precisely to say the numerical literal is a float value, Or decimal-type-suffix character d or D to say the numerical literal is a decimal value.\nDigits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9. You can make a floating point number negative by writing a minus (-) sign in front of the literal. See Unary Expressions for more details.\nfloat-literal.bal decimal-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; public function main() { float f1 = 12.345; float f2 = -5.678; float f3 = .5678; float f4 = 123.456f; float f5 = 567.8901F; float f6 = 505f; float f7 = 505.0f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); io:println(f7); } bal run float-literal.bal 1 2 3 4 5 6 7 12.345 -5.678 0.5678 123.456 567.8901 505.0 505.0 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; public function main() { decimal f1 = 12.345; decimal f2 = -5.678; decimal f3 = .5678; decimal f4 = 123.456d; decimal f5 = 567.8901D; decimal f6 = 505d; decimal f7 = 505.0d; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); io:println(f7); } bal run decimal-literal.bal 1 2 3 4 5 6 7 12.345 -5.678 0.5678 123.456 567.8901 505 505.0 Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/types/simple/float/","title":"Float","tags":["float"],"description":"","content":"The float basic data type represents 64-bit IEEE 754-2008 binary floating point numbers.\nRelated Tips üí°\u0026nbsp;Floating Point Literal üí°\u0026nbsp;Floating Point Literal With Exponent üí°\u0026nbsp;Hexadecimal Float Literal üí°\u0026nbsp;Numbers Are Immutable üí°\u0026nbsp;Numerical Operations üí°\u0026nbsp;Converting Numerical Values üí°\u0026nbsp;Type of a numeric literal üí°\u0026nbsp;\u0026nbsp;Floating Point Literal There are two floating point types, float and decimal. Both use the same decimal number (Base 10 number) literal syntax.\nfloat-literal.bal decimal-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; public function main() { float f1 = 12.345; float f2 = -5.678; float f3 = .5678; float f4 = 123.456f; float f5 = 567.8901F; float f6 = 505f; float f7 = 505.0f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); io:println(f7); } bal run float-literal.bal 1 2 3 4 5 6 7 12.345 -5.678 0.5678 123.456 567.8901 505.0 505.0 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; public function main() { decimal f1 = 12.345; decimal f2 = -5.678; decimal f3 = .5678; decimal f4 = 123.456d; decimal f5 = 567.8901D; decimal f6 = 505d; decimal f7 = 505.0d; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); io:println(f7); } bal run decimal-literal.bal 1 2 3 4 5 6 7 12.345 -5.678 0.5678 123.456 567.8901 505 505.0 Ballerina 2201.1.1 - View Source literal numeric-literal float decimal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Floating Point Literal With Exponent You can write floating numbers using scientific notation. Letter e or E is used as the exponent indicator.\nfloat-exp-literal.bal decimal-exp-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { float f1 = 12e4; float f2 = 543e-5; float f3 = 1.23e3; float f4 = 1.23e3f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); } bal run float-exp-literal.bal 1 2 3 4 120000.0 0.00543 1230.0 1230.0 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { decimal d1 = 12e4; decimal d2 = 543e-5; decimal d3 = 1.23e3; decimal d4 = 1.23e3d; io:println(d1); io:println(d2); io:println(d3); io:println(d4); } bal run decimal-exp-literal.bal 1 2 3 4 1.2E+5 0.00543 1.23E+3 1.23E+3 Ballerina 2201.1.1 - View Source literal numeric-literal float decimal exponent üí°\u0026nbsp;\u0026nbsp;Hexadecimal Float Literal Hexadecimal numbers start with a Hex Indicator 0x (Number zero and lowercase letter x) or 0X (Number zero and Uppercase letter X) Hex digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a or A, b or B, c or C, d or D, e or E, f or F\nfloat-hex-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import ballerina/io; public function main() { float f1 = 0x5.8; float f2 = -0x5.8; float f3 = 0x7b.74bc6a7ef9db22d; float f4 = 0X7B.74BC6A7EF9DB22D; float f5 = 0x1F9.A; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); } bal run float-hex-literal.bal 1 2 3 4 5 5.5 -5.5 123.456 123.456 505.625 Ballerina 2201.1.1 - View Source literal numeric-literal float hex üí°\u0026nbsp;\u0026nbsp;Numbers Are Immutable Numerical value don\u0026rsquo;t have a storage identity, hence they are Inherently immutable (once created, it can\u0026rsquo;t be change the content of the value).\nNumbers are assignable to a readonly variable.\nnumerical.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import ballerina/io; public function main() { int i = 10; float f = 2.1; decimal d = 5.0; readonly r1 = i; readonly r2 = f; readonly r3 = d; io:println(i is readonly); io:println(f is readonly); io:println(d is readonly); io:println(r1); io:println(r2); io:println(r3); } bal run numerical.bal 1 2 3 4 5 6 true true true 10 2.1 5.0 Ballerina 2201.1.1 - View Source int float decimal readonly üí°\u0026nbsp;\u0026nbsp;Numerical Operations int,float,decimal values support multiple operators;\nMultiplicative ( *, /, % ) Additive (+, -) Relational Operations ( \u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;=) Equality ( ==, !=, ===, !===) Additionally, int type supports following operations\nShift Operations ( \u0026lt;\u0026lt;,\u0026gt;\u0026gt;, \u0026gt;\u0026gt;\u0026gt;) Binary bitwise (\u0026amp;, ^, |) Range Operator ( x ... y ) See each section for more tips.\nRuntime will panic on integer overflow or on division by zero.\nint float decimal expr üí°\u0026nbsp;\u0026nbsp;Converting Numerical Values Unlike some programming languages, there is no implicit conversion between Ballerina numerical types.\nint-float-error.bal int-decimal-error.bal float-decimal-error.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { int i = 10; float f = 2.1; int i1 = f; // ^ Error int i2 = \u0026lt;int\u0026gt; f; // OK float f1 = i; // ^ Error float f2 = \u0026lt;float\u0026gt; i; // OK } bal run int-float-error.bal Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { int i = 10; decimal d = 5.0; int i1 = d; // ^ Error int i2 = \u0026lt;int\u0026gt; d; // OK decimal d1 = i; // ^ Error decimal d2 = \u0026lt;decimal\u0026gt; i; // OK } bal run int-decimal-error.bal Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { float f = 2.1; decimal d = 5.0; float f1 = d; // ^ Error float f2 = \u0026lt;float\u0026gt; d; // OK decimal d1 = f; // ^ Error decimal d2 = \u0026lt;decimal\u0026gt; f; // OK } bal run float-decimal-error.bal Ballerina 2201.1.1 - View Source int float decimal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Type of a numeric literal A value written in a numeric-literal always represents a precise type, which is the singleton type that the literal represents. The broad type of the literal always belongs only to one of the basic types int, float, or decimal.\nFor example, the type of literal 10 is integer 10, and its broad type is int. This is not always true. Depending on the context, literal 10 can represent floating point value 10.0 or decimal value 10.\nnumeric-literals.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; const int TEN = 10; public function main() { var a1 = 10; TEN a2 = 10; float a3 = 10; decimal a4 = 10; float|decimal a5 = 10; var a6 = 10.0; io:println(a1 is int); io:println(a2 is TEN); io:println(a3); io:println(a4); io:println(a5 is float); io:println(a6 is float); } bal run numeric-literals.bal 1 2 3 4 5 6 true true 10.0 10 true true Ballerina 2201.1.1 - View Source literal numeric-literal int float decimal \u0026nbsp;See more "},{"uri":"https://bal.tips/examples/expr/literals/float-exp-literal/","title":"Floating Point Literal With Exponent","tags":["literal","numeric-literal","float","decimal","exponent"],"description":"","content":"You can write floating numbers using scientific notation. Letter e or E is used as the exponent indicator.\nfloat-exp-literal.bal decimal-exp-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { float f1 = 12e4; float f2 = 543e-5; float f3 = 1.23e3; float f4 = 1.23e3f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); } bal run float-exp-literal.bal 1 2 3 4 120000.0 0.00543 1230.0 1230.0 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { decimal d1 = 12e4; decimal d2 = 543e-5; decimal d3 = 1.23e3; decimal d4 = 1.23e3d; io:println(d1); io:println(d2); io:println(d3); io:println(d4); } bal run decimal-exp-literal.bal 1 2 3 4 1.2E+5 0.00543 1.23E+3 1.23E+3 Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/examples/expr/literals/float-hex-literal/","title":"Hexadecimal Float Literal","tags":["literal","numeric-literal","float","hex"],"description":"","content":"Hexadecimal numbers start with a Hex Indicator 0x (Number zero and lowercase letter x) or 0X (Number zero and Uppercase letter X) Hex digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a or A, b or B, c or C, d or D, e or E, f or F\nfloat-hex-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import ballerina/io; public function main() { float f1 = 0x5.8; float f2 = -0x5.8; float f3 = 0x7b.74bc6a7ef9db22d; float f4 = 0X7B.74BC6A7EF9DB22D; float f5 = 0x1F9.A; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); } bal run float-hex-literal.bal 1 2 3 4 5 5.5 -5.5 123.456 123.456 505.625 Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/types/simple/decimal/","title":"Decimal","tags":["decimal"],"description":"","content":"The decimal basic data type represents 128-bit IEEE 754-2008 decimal floating point values.\nRelated Tips üí°\u0026nbsp;Floating Point Literal üí°\u0026nbsp;Floating Point Literal With Exponent üí°\u0026nbsp;Numbers Are Immutable üí°\u0026nbsp;Numerical Operations üí°\u0026nbsp;Converting Numerical Values üí°\u0026nbsp;Type of a numeric literal üí°\u0026nbsp;\u0026nbsp;Floating Point Literal There are two floating point types, float and decimal. Both use the same decimal number (Base 10 number) literal syntax.\nfloat-literal.bal decimal-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; public function main() { float f1 = 12.345; float f2 = -5.678; float f3 = .5678; float f4 = 123.456f; float f5 = 567.8901F; float f6 = 505f; float f7 = 505.0f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); io:println(f7); } bal run float-literal.bal 1 2 3 4 5 6 7 12.345 -5.678 0.5678 123.456 567.8901 505.0 505.0 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; public function main() { decimal f1 = 12.345; decimal f2 = -5.678; decimal f3 = .5678; decimal f4 = 123.456d; decimal f5 = 567.8901D; decimal f6 = 505d; decimal f7 = 505.0d; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); io:println(f7); } bal run decimal-literal.bal 1 2 3 4 5 6 7 12.345 -5.678 0.5678 123.456 567.8901 505 505.0 Ballerina 2201.1.1 - View Source literal numeric-literal float decimal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Floating Point Literal With Exponent You can write floating numbers using scientific notation. Letter e or E is used as the exponent indicator.\nfloat-exp-literal.bal decimal-exp-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { float f1 = 12e4; float f2 = 543e-5; float f3 = 1.23e3; float f4 = 1.23e3f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); } bal run float-exp-literal.bal 1 2 3 4 120000.0 0.00543 1230.0 1230.0 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { decimal d1 = 12e4; decimal d2 = 543e-5; decimal d3 = 1.23e3; decimal d4 = 1.23e3d; io:println(d1); io:println(d2); io:println(d3); io:println(d4); } bal run decimal-exp-literal.bal 1 2 3 4 1.2E+5 0.00543 1.23E+3 1.23E+3 Ballerina 2201.1.1 - View Source literal numeric-literal float decimal exponent üí°\u0026nbsp;\u0026nbsp;Numbers Are Immutable Numerical value don\u0026rsquo;t have a storage identity, hence they are Inherently immutable (once created, it can\u0026rsquo;t be change the content of the value).\nNumbers are assignable to a readonly variable.\nnumerical.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import ballerina/io; public function main() { int i = 10; float f = 2.1; decimal d = 5.0; readonly r1 = i; readonly r2 = f; readonly r3 = d; io:println(i is readonly); io:println(f is readonly); io:println(d is readonly); io:println(r1); io:println(r2); io:println(r3); } bal run numerical.bal 1 2 3 4 5 6 true true true 10 2.1 5.0 Ballerina 2201.1.1 - View Source int float decimal readonly üí°\u0026nbsp;\u0026nbsp;Numerical Operations int,float,decimal values support multiple operators;\nMultiplicative ( *, /, % ) Additive (+, -) Relational Operations ( \u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;=) Equality ( ==, !=, ===, !===) Additionally, int type supports following operations\nShift Operations ( \u0026lt;\u0026lt;,\u0026gt;\u0026gt;, \u0026gt;\u0026gt;\u0026gt;) Binary bitwise (\u0026amp;, ^, |) Range Operator ( x ... y ) See each section for more tips.\nRuntime will panic on integer overflow or on division by zero.\nint float decimal expr üí°\u0026nbsp;\u0026nbsp;Converting Numerical Values Unlike some programming languages, there is no implicit conversion between Ballerina numerical types.\nint-float-error.bal int-decimal-error.bal float-decimal-error.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { int i = 10; float f = 2.1; int i1 = f; // ^ Error int i2 = \u0026lt;int\u0026gt; f; // OK float f1 = i; // ^ Error float f2 = \u0026lt;float\u0026gt; i; // OK } bal run int-float-error.bal Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { int i = 10; decimal d = 5.0; int i1 = d; // ^ Error int i2 = \u0026lt;int\u0026gt; d; // OK decimal d1 = i; // ^ Error decimal d2 = \u0026lt;decimal\u0026gt; i; // OK } bal run int-decimal-error.bal Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { float f = 2.1; decimal d = 5.0; float f1 = d; // ^ Error float f2 = \u0026lt;float\u0026gt; d; // OK decimal d1 = f; // ^ Error decimal d2 = \u0026lt;decimal\u0026gt; f; // OK } bal run float-decimal-error.bal Ballerina 2201.1.1 - View Source int float decimal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Type of a numeric literal A value written in a numeric-literal always represents a precise type, which is the singleton type that the literal represents. The broad type of the literal always belongs only to one of the basic types int, float, or decimal.\nFor example, the type of literal 10 is integer 10, and its broad type is int. This is not always true. Depending on the context, literal 10 can represent floating point value 10.0 or decimal value 10.\nnumeric-literals.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; const int TEN = 10; public function main() { var a1 = 10; TEN a2 = 10; float a3 = 10; decimal a4 = 10; float|decimal a5 = 10; var a6 = 10.0; io:println(a1 is int); io:println(a2 is TEN); io:println(a3); io:println(a4); io:println(a5 is float); io:println(a6 is float); } bal run numeric-literals.bal 1 2 3 4 5 6 true true 10.0 10 true true Ballerina 2201.1.1 - View Source literal numeric-literal int float decimal \u0026nbsp;See more "},{"uri":"https://bal.tips/types/sequence/string/","title":"String","tags":["string"],"description":"","content":"The string data type represents sequence of zero of more unicode characters.\nRelated Tips üí°\u0026nbsp;String Literal üí°\u0026nbsp;String Escape Chars üí°\u0026nbsp;String Templates üí°\u0026nbsp;\u0026nbsp;String Literal You can write a string literal, by wrapping the Unicode code points using two double quotes \u0026quot;.\nstring-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { string en = \u0026#34;Hello, World!\u0026#34;; string zh = \u0026#34;‰Ω†Â•Ω‰∏ñÁïåÔºÅ\u0026#34;; string hi = \u0026#34;‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ!\u0026#34;; string si = \u0026#34;‡∑Ñ‡∑ô‡∂Ω‡∑ù ‡∑Ä‡∂ª‡∑ä‡∂Ω‡∑ä‡∂©‡∑ä!\u0026#34;; string emoji = \u0026#34;üëãüåè\u0026#34;; io:println(en); io:println(zh); io:println(hi); io:println(si); io:println(emoji); } bal run string-literal.bal 1 2 3 4 5 Hello, World! ‰Ω†Â•Ω‰∏ñÁïåÔºÅ ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ! ‡∑Ñ‡∑ô‡∂Ω‡∑ù ‡∑Ä‡∂ª‡∑ä‡∂Ω‡∑ä‡∂©‡∑ä! üëãüåè Ballerina 2201.1.1 - View Source literal string-literal string DoubleQuotedStringLiteral üí°\u0026nbsp;\u0026nbsp;String Escape Chars There are certain code points, that are not allowed inside a string literal. You can use String Escape or Numeric Escape syntaxes to provide such code points.\nstring-escape.bal numeric-escape.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { string tab = \u0026#34;tab :A\\tB\u0026#34;; string newline = \u0026#34;newline :A\\nB\u0026#34;; string carriageReturn = \u0026#34;carriageReturn :A\\rB\u0026#34;; string backSlash = \u0026#34;backSlash :A\\\\B\u0026#34;; string doubleQuote = \u0026#34;doubleQuote :A\\\u0026#34;B\u0026#34;; io:println(tab); io:println(newline); io:println(carriageReturn); io:println(backSlash); io:println(doubleQuote); } bal run string-escape.bal 1 2 3 4 5 6 7 tab :A\tB newline :A B carriageReturn :A B backSlash :A\\B doubleQuote :A\u0026#34;B Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { string tab = \u0026#34;tab :A\\u{9}B\u0026#34;; string newline = \u0026#34;newline :A\\u{A}B\u0026#34;; string carriageReturn = \u0026#34;carriageReturn :A\\u{D}B\u0026#34;; string backSlash = \u0026#34;backSlash :A\\u{5C}B\u0026#34;; string doubleQuote = \u0026#34;doubleQuote :A\\u{22}B\u0026#34;; io:println(tab); io:println(newline); io:println(carriageReturn); io:println(backSlash); io:println(doubleQuote); } bal run numeric-escape.bal 1 2 3 4 5 6 7 tab :A\tB newline :A B carriageReturn :A B backSlash :A\\B doubleQuote :A\u0026#34;B Ballerina 2201.1.1 - View Source literal string-literal string StringEscape NumericEscape \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;String Templates A String template expression constructs a string value using the Template expression. Support interpolation (Syntax ${expr}) and each interpolation expression must have a type that is a subtype of boolean|int|float|decimal|string. You can use this expression in places where you use string concatenation, or you need to build multi-line string values.\ntemplate.bal template-special.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import ballerina/io; type Employee record { int id; string name; decimal salary; }; public function main() { Employee emp = { name : \u0026#34;Bob\u0026#34;, id : 2, salary: 45000}; string department = \u0026#34;IT\u0026#34;; string s = string `Hello, ${emp.name}!`; string s2 = string `Your id is ${emp.id} Your department is ${department} Your salary is ${emp.salary}`; io:println(s); io:println(s2); } bal run template.bal 1 2 3 4 Hello, Bob! Your id is 2 Your department is IT Your salary is 45000 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { string s1 = string `\\\\ \\n \\t`; string s2 = string `backtick - ${\u0026#34;`\u0026#34;}`; int value = 100; string s3 = string `Price $${value}`; io:println(s1); io:println(s2); io:println(s3); } bal run template-special.bal 1 2 3 \\\\ \\n \\t backtick - ` Price $100 Ballerina 2201.1.1 - View Source template string-template string \u0026nbsp;See more "},{"uri":"https://bal.tips/examples/expr/literals/string-literal/","title":"String Literal","tags":["literal","string-literal","string","DoubleQuotedStringLiteral"],"description":"","content":"You can write a string literal, by wrapping the Unicode code points using two double quotes \u0026quot;.\nstring-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { string en = \u0026#34;Hello, World!\u0026#34;; string zh = \u0026#34;‰Ω†Â•Ω‰∏ñÁïåÔºÅ\u0026#34;; string hi = \u0026#34;‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ!\u0026#34;; string si = \u0026#34;‡∑Ñ‡∑ô‡∂Ω‡∑ù ‡∑Ä‡∂ª‡∑ä‡∂Ω‡∑ä‡∂©‡∑ä!\u0026#34;; string emoji = \u0026#34;üëãüåè\u0026#34;; io:println(en); io:println(zh); io:println(hi); io:println(si); io:println(emoji); } bal run string-literal.bal 1 2 3 4 5 Hello, World! ‰Ω†Â•Ω‰∏ñÁïåÔºÅ ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ! ‡∑Ñ‡∑ô‡∂Ω‡∑ù ‡∑Ä‡∂ª‡∑ä‡∂Ω‡∑ä‡∂©‡∑ä! üëãüåè Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/examples/expr/literals/string-escape/","title":"String Escape Chars","tags":["literal","string-literal","string","StringEscape","NumericEscape"],"description":"","content":"There are certain code points, that are not allowed inside a string literal. You can use String Escape or Numeric Escape syntaxes to provide such code points.\nString Escape syntax starts with \\, then followed by one of t, n, r, \\, \u0026quot; letters. Numeric Escape syntax starts with u{, then hexadecimal numeral of the code point, followed by }. The hexadecimal numeral is an integer n where 0 ‚â§ n \u0026lt; 0xD800 or 0xDFFF \u0026lt; n ‚â§ 0x10FFFF. string-escape.bal numeric-escape.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { string tab = \u0026#34;tab :A\\tB\u0026#34;; string newline = \u0026#34;newline :A\\nB\u0026#34;; string carriageReturn = \u0026#34;carriageReturn :A\\rB\u0026#34;; string backSlash = \u0026#34;backSlash :A\\\\B\u0026#34;; string doubleQuote = \u0026#34;doubleQuote :A\\\u0026#34;B\u0026#34;; io:println(tab); io:println(newline); io:println(carriageReturn); io:println(backSlash); io:println(doubleQuote); } bal run string-escape.bal 1 2 3 4 5 6 7 tab :A\tB newline :A B carriageReturn :A B backSlash :A\\B doubleQuote :A\u0026#34;B Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { string tab = \u0026#34;tab :A\\u{9}B\u0026#34;; string newline = \u0026#34;newline :A\\u{A}B\u0026#34;; string carriageReturn = \u0026#34;carriageReturn :A\\u{D}B\u0026#34;; string backSlash = \u0026#34;backSlash :A\\u{5C}B\u0026#34;; string doubleQuote = \u0026#34;doubleQuote :A\\u{22}B\u0026#34;; io:println(tab); io:println(newline); io:println(carriageReturn); io:println(backSlash); io:println(doubleQuote); } bal run numeric-escape.bal 1 2 3 4 5 6 7 tab :A\tB newline :A B carriageReturn :A B backSlash :A\\B doubleQuote :A\u0026#34;B Ballerina 2201.1.1 - View Source Here is the summary.\nName Code Points Incorrect Usage Correct Usage Line feed - LF, New Line 0xA string s = \u0026quot; \u0026quot;; string s1 = \u0026quot;\\n\u0026quot;; string s2 = \u0026quot;\\u{A}\u0026quot;; Carriage return - CR 0xD string s = \u0026quot; \u0026quot;; string s1 = \u0026quot;\\r\u0026quot;; string s2 = \u0026quot;\\u{D}\u0026quot;; Reverse Solidus, BackSlash \\ - 0x5C string s = \u0026quot;\\\u0026quot;; string s1 = \u0026quot;\\\\\u0026quot;; string s2 = \u0026quot;\\u{5C}\u0026quot;; Double Quote/Quotation Mark \u0026quot; - 0x22 string s = \u0026quot;\u0026quot;\u0026quot;; string s1 = \u0026quot;\\\u0026quot;\u0026quot;; string s2 = \u0026quot;\\u{22}\u0026quot;; "},{"uri":"https://bal.tips/examples/types/readonly/numerical/","title":"Numbers Are Immutable","tags":["int","float","decimal","readonly"],"description":"","content":"Numerical value don\u0026rsquo;t have a storage identity, hence they are Inherently immutable (once created, it can\u0026rsquo;t be change the content of the value).\nNumbers are assignable to a readonly variable.\nnumerical.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import ballerina/io; public function main() { int i = 10; float f = 2.1; decimal d = 5.0; readonly r1 = i; readonly r2 = f; readonly r3 = d; io:println(i is readonly); io:println(f is readonly); io:println(d is readonly); io:println(r1); io:println(r2); io:println(r3); } bal run numerical.bal 1 2 3 4 5 6 true true true 10 2.1 5.0 Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/types/subtypes/byte/","title":"Byte","tags":["byte"],"description":"","content":"byte type is built-in union type, that includes int values between 0 and 255 inclusive. (0 ‚â§ values ‚â§ 255).\nType byte\u0026rsquo;s value space contains only int values, it is a subtype of the int Type byte and built-in subtype int:Unsigned8 are equivalent. Related Tips üí°\u0026nbsp;Base16 Byte Array Literal üí°\u0026nbsp;Base64 Byte Array Literal üí°\u0026nbsp;Byte - Ballerina vs Java üí°\u0026nbsp;\u0026nbsp;Base16 Byte Array Literal You can use Base16 Byte Array Literal syntax to represent bytes in Hex textual form.\nBase16Literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { byte[] a = base16 `11AB22CD`; byte[] b = base16 `c3 d4 e5 f6`; byte[] c = base16 ` 55 EE 66 FF 77 AB 88 CD 99 EF 00 AA `; io:println(a); io:println(b); io:println(c); } bal run Base16Literal.bal 1 2 3 [17,171,34,205] [195,212,229,246] [85,238,102,255,119,171,136,205,153,239,0,170] Ballerina 2201.1.1 - View Source literal byte-array-literal byte Base16Literal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Base64 Byte Array Literal You can use Base64 Byte Array Literal syntax to represent bytes in Base64 encoded form.\nBase64Literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { byte[] a = base64 `AAAB`; byte[] b = base64 `ABB=`; byte[] c = base64 `BC==`; byte[] d = base64 `ABCD pqrs 5678 +/12`; io:println(a); io:println(b); io:println(c); io:println(d); } bal run Base64Literal.bal 1 2 3 4 [0,0,1] [0,16] [4] [0,16,131,166,170,236,231,174,252,251,253,118] Ballerina 2201.1.1 - View Source literal byte-array-literal byte Base64Literal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Byte - Ballerina vs Java Ballerina byte type vs Java byte Comparison\nBallerina Java Type byte byte or java.lang.Byte Signed Unsigned Signed** Max value 255 127 Min value 0 -128 0000 0000 0 0 0000 0001 1 1 0111 1111 127 127 1000 0000 128 -128 1000 0001 129 -127 (= -128 + 1) 1111 1111 255 -1 (= -128 + 127) ** Read Two\u0026rsquo;s Complement\u0026nbsp; byte java "},{"uri":"https://bal.tips/examples/expr/numerical-operations/","title":"Numerical Operations","tags":["int","float","decimal","expr"],"description":"","content":"int,float,decimal values support multiple operators;\nMultiplicative ( *, /, % ) Additive (+, -) Relational Operations ( \u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;=) Equality ( ==, !=, ===, !===) Additionally, int type supports following operations\nShift Operations ( \u0026lt;\u0026lt;,\u0026gt;\u0026gt;, \u0026gt;\u0026gt;\u0026gt;) Binary bitwise (\u0026amp;, ^, |) Range Operator ( x ... y ) See each section for more tips.\nRuntime will panic on integer overflow or on division by zero.\n"},{"uri":"https://bal.tips/examples/expr/casts/numerical/","title":"Converting Numerical Values","tags":["int","float","decimal"],"description":"","content":"Unlike some programming languages, there is no implicit conversion between Ballerina numerical types.\nIf required, you can use a type-cast expression to do a numeric conversion. This is useful when converting a mapping value to another with the same field name but with different numerical type.\nint-float-error.bal int-decimal-error.bal float-decimal-error.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { int i = 10; float f = 2.1; int i1 = f; // ^ Error int i2 = \u0026lt;int\u0026gt; f; // OK float f1 = i; // ^ Error float f2 = \u0026lt;float\u0026gt; i; // OK } bal run int-float-error.bal Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { int i = 10; decimal d = 5.0; int i1 = d; // ^ Error int i2 = \u0026lt;int\u0026gt; d; // OK decimal d1 = i; // ^ Error decimal d2 = \u0026lt;decimal\u0026gt; i; // OK } bal run int-decimal-error.bal Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { float f = 2.1; decimal d = 5.0; float f1 = d; // ^ Error float f2 = \u0026lt;float\u0026gt; d; // OK decimal d1 = f; // ^ Error decimal d2 = \u0026lt;decimal\u0026gt; f; // OK } bal run float-decimal-error.bal Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/learn-syntax/expr/literals/","title":"Literals","tags":["literal"],"description":"","content":"Ballerina Language Specification defines several Literals\u0026nbsp; syntaxes.\nHere is the summary.\nType Description Example nil-literal Writing a nil value () boolean-literal Writing a boolean value true or false numeric-literal Write a number, such as int, float, decimal 123, 456.78 string-literal Write a string value \u0026quot;Hello, World!\u0026quot; byte-array-literal Write a byte[] array value base16 `AB 12 34` Related Tips üí°\u0026nbsp;Nil Literal üí°\u0026nbsp;Null Literal üí°\u0026nbsp;Boolean Literal üí°\u0026nbsp;Integer Literal üí°\u0026nbsp;Hexadecimal Integer Literal üí°\u0026nbsp;Floating Point Literal üí°\u0026nbsp;Floating Point Literal With Exponent üí°\u0026nbsp;Hexadecimal Float Literal üí°\u0026nbsp;String Literal üí°\u0026nbsp;String Escape Chars üí°\u0026nbsp;Type of a numeric literal üí°\u0026nbsp;Base16 Byte Array Literal üí°\u0026nbsp;Base64 Byte Array Literal üí°\u0026nbsp;\u0026nbsp;Nil Literal The nil basic type has only a single value called nil. So, both the type and the value use the syntax ().\nnil-literal.bal 1 2 3 4 5 6 7 import ballerina/io; public function main() { () a = (); io:println(\u0026#34;a:\u0026#34;, a); } bal run nil-literal.bal 1 a: Ballerina 2201.1.1 - View Source literal nil-literal nil \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Null Literal For JSON compatibility you can also write () as null. This will help you to copy and paste JSON values as expressions in the code. But avoid using null in non-JSON-related places.\nnull-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import ballerina/io; public function main() { () a = null; null b = null; // Also valid io:println(\u0026#34;a:\u0026#34;, a); io:println(\u0026#34;b:\u0026#34;, b); // Using JSON value as expr json tom = {\u0026#34;name\u0026#34; : \u0026#34;tom\u0026#34;, \u0026#34;job\u0026#34; : null}; json bob = {\u0026#34;name\u0026#34; : \u0026#34;bob\u0026#34;, \u0026#34;job\u0026#34; : ()}; io:println(\u0026#34;person:\u0026#34;, tom); io:println(\u0026#34;person:\u0026#34;, bob); } bal run null-literal.bal 1 2 3 4 a: b: person:{\u0026#34;name\u0026#34;:\u0026#34;tom\u0026#34;,\u0026#34;job\u0026#34;:null} person:{\u0026#34;name\u0026#34;:\u0026#34;bob\u0026#34;,\u0026#34;job\u0026#34;:null} Ballerina 2201.1.1 - View Source literal nil-literal nil null \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Boolean Literal The boolean basic type has only two values; boolean true is written as true and boolean false is written as false.\nboolean-literal.bal 1 2 3 4 5 6 7 8 9 import ballerina/io; public function main() { boolean enable = true; boolean open = false; io:println(enable); io:println(open); } bal run boolean-literal.bal 1 2 true false Ballerina 2201.1.1 - View Source literal boolean-literal boolean \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Integer Literal You can write integer values using a set of digits of the decimal system (Base 10 number) numbers. Digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9\nint-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0; int i2 = -10; int i3 = 100; int i4 = -100000; int i5 = 1234567890; io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } bal run int-literal.bal 1 2 3 4 5 0 -10 100 -100000 1234567890 Ballerina 2201.1.1 - View Source literal numeric-literal int \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Hexadecimal Integer Literal You can also write an integer using the Hexadecimal (Base 16 number) numeral system.\nint-literal-hex.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { int i1 = 0x0; int i2 = 0xa; int i3 = 0xA; int i4 = -0xa1b2; int i5 = 0XAb; io:println(i1); io:println(i2); io:println(i3); io:println(i4); io:println(i5); } bal run int-literal-hex.bal 1 2 3 4 5 0 10 10 -41394 171 Ballerina 2201.1.1 - View Source literal numeric-literal int hex \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Floating Point Literal There are two floating point types, float and decimal. Both use the same decimal number (Base 10 number) literal syntax.\nfloat-literal.bal decimal-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; public function main() { float f1 = 12.345; float f2 = -5.678; float f3 = .5678; float f4 = 123.456f; float f5 = 567.8901F; float f6 = 505f; float f7 = 505.0f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); io:println(f7); } bal run float-literal.bal 1 2 3 4 5 6 7 12.345 -5.678 0.5678 123.456 567.8901 505.0 505.0 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; public function main() { decimal f1 = 12.345; decimal f2 = -5.678; decimal f3 = .5678; decimal f4 = 123.456d; decimal f5 = 567.8901D; decimal f6 = 505d; decimal f7 = 505.0d; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); io:println(f6); io:println(f7); } bal run decimal-literal.bal 1 2 3 4 5 6 7 12.345 -5.678 0.5678 123.456 567.8901 505 505.0 Ballerina 2201.1.1 - View Source literal numeric-literal float decimal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Floating Point Literal With Exponent You can write floating numbers using scientific notation. Letter e or E is used as the exponent indicator.\nfloat-exp-literal.bal decimal-exp-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { float f1 = 12e4; float f2 = 543e-5; float f3 = 1.23e3; float f4 = 1.23e3f; io:println(f1); io:println(f2); io:println(f3); io:println(f4); } bal run float-exp-literal.bal 1 2 3 4 120000.0 0.00543 1230.0 1230.0 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { decimal d1 = 12e4; decimal d2 = 543e-5; decimal d3 = 1.23e3; decimal d4 = 1.23e3d; io:println(d1); io:println(d2); io:println(d3); io:println(d4); } bal run decimal-exp-literal.bal 1 2 3 4 1.2E+5 0.00543 1.23E+3 1.23E+3 Ballerina 2201.1.1 - View Source literal numeric-literal float decimal exponent üí°\u0026nbsp;\u0026nbsp;Hexadecimal Float Literal Hexadecimal numbers start with a Hex Indicator 0x (Number zero and lowercase letter x) or 0X (Number zero and Uppercase letter X) Hex digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a or A, b or B, c or C, d or D, e or E, f or F\nfloat-hex-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import ballerina/io; public function main() { float f1 = 0x5.8; float f2 = -0x5.8; float f3 = 0x7b.74bc6a7ef9db22d; float f4 = 0X7B.74BC6A7EF9DB22D; float f5 = 0x1F9.A; io:println(f1); io:println(f2); io:println(f3); io:println(f4); io:println(f5); } bal run float-hex-literal.bal 1 2 3 4 5 5.5 -5.5 123.456 123.456 505.625 Ballerina 2201.1.1 - View Source literal numeric-literal float hex üí°\u0026nbsp;\u0026nbsp;String Literal You can write a string literal, by wrapping the Unicode code points using two double quotes \u0026quot;.\nstring-literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { string en = \u0026#34;Hello, World!\u0026#34;; string zh = \u0026#34;‰Ω†Â•Ω‰∏ñÁïåÔºÅ\u0026#34;; string hi = \u0026#34;‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ!\u0026#34;; string si = \u0026#34;‡∑Ñ‡∑ô‡∂Ω‡∑ù ‡∑Ä‡∂ª‡∑ä‡∂Ω‡∑ä‡∂©‡∑ä!\u0026#34;; string emoji = \u0026#34;üëãüåè\u0026#34;; io:println(en); io:println(zh); io:println(hi); io:println(si); io:println(emoji); } bal run string-literal.bal 1 2 3 4 5 Hello, World! ‰Ω†Â•Ω‰∏ñÁïåÔºÅ ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ! ‡∑Ñ‡∑ô‡∂Ω‡∑ù ‡∑Ä‡∂ª‡∑ä‡∂Ω‡∑ä‡∂©‡∑ä! üëãüåè Ballerina 2201.1.1 - View Source literal string-literal string DoubleQuotedStringLiteral üí°\u0026nbsp;\u0026nbsp;String Escape Chars There are certain code points, that are not allowed inside a string literal. You can use String Escape or Numeric Escape syntaxes to provide such code points.\nstring-escape.bal numeric-escape.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { string tab = \u0026#34;tab :A\\tB\u0026#34;; string newline = \u0026#34;newline :A\\nB\u0026#34;; string carriageReturn = \u0026#34;carriageReturn :A\\rB\u0026#34;; string backSlash = \u0026#34;backSlash :A\\\\B\u0026#34;; string doubleQuote = \u0026#34;doubleQuote :A\\\u0026#34;B\u0026#34;; io:println(tab); io:println(newline); io:println(carriageReturn); io:println(backSlash); io:println(doubleQuote); } bal run string-escape.bal 1 2 3 4 5 6 7 tab :A\tB newline :A B carriageReturn :A B backSlash :A\\B doubleQuote :A\u0026#34;B Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import ballerina/io; public function main() { string tab = \u0026#34;tab :A\\u{9}B\u0026#34;; string newline = \u0026#34;newline :A\\u{A}B\u0026#34;; string carriageReturn = \u0026#34;carriageReturn :A\\u{D}B\u0026#34;; string backSlash = \u0026#34;backSlash :A\\u{5C}B\u0026#34;; string doubleQuote = \u0026#34;doubleQuote :A\\u{22}B\u0026#34;; io:println(tab); io:println(newline); io:println(carriageReturn); io:println(backSlash); io:println(doubleQuote); } bal run numeric-escape.bal 1 2 3 4 5 6 7 tab :A\tB newline :A B carriageReturn :A B backSlash :A\\B doubleQuote :A\u0026#34;B Ballerina 2201.1.1 - View Source literal string-literal string StringEscape NumericEscape \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Type of a numeric literal A value written in a numeric-literal always represents a precise type, which is the singleton type that the literal represents. The broad type of the literal always belongs only to one of the basic types int, float, or decimal.\nFor example, the type of literal 10 is integer 10, and its broad type is int. This is not always true. Depending on the context, literal 10 can represent floating point value 10.0 or decimal value 10.\nnumeric-literals.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; const int TEN = 10; public function main() { var a1 = 10; TEN a2 = 10; float a3 = 10; decimal a4 = 10; float|decimal a5 = 10; var a6 = 10.0; io:println(a1 is int); io:println(a2 is TEN); io:println(a3); io:println(a4); io:println(a5 is float); io:println(a6 is float); } bal run numeric-literals.bal 1 2 3 4 5 6 true true 10.0 10 true true Ballerina 2201.1.1 - View Source literal numeric-literal int float decimal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Base16 Byte Array Literal You can use Base16 Byte Array Literal syntax to represent bytes in Hex textual form.\nBase16Literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { byte[] a = base16 `11AB22CD`; byte[] b = base16 `c3 d4 e5 f6`; byte[] c = base16 ` 55 EE 66 FF 77 AB 88 CD 99 EF 00 AA `; io:println(a); io:println(b); io:println(c); } bal run Base16Literal.bal 1 2 3 [17,171,34,205] [195,212,229,246] [85,238,102,255,119,171,136,205,153,239,0,170] Ballerina 2201.1.1 - View Source literal byte-array-literal byte Base16Literal \u0026nbsp;See more üí°\u0026nbsp;\u0026nbsp;Base64 Byte Array Literal You can use Base64 Byte Array Literal syntax to represent bytes in Base64 encoded form.\nBase64Literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { byte[] a = base64 `AAAB`; byte[] b = base64 `ABB=`; byte[] c = base64 `BC==`; byte[] d = base64 `ABCD pqrs 5678 +/12`; io:println(a); io:println(b); io:println(c); io:println(d); } bal run Base64Literal.bal 1 2 3 4 [0,0,1] [0,16] [4] [0,16,131,166,170,236,231,174,252,251,253,118] Ballerina 2201.1.1 - View Source literal byte-array-literal byte Base64Literal \u0026nbsp;See more "},{"uri":"https://bal.tips/examples/expr/literals/numeric-literals/","title":"Type of a numeric literal","tags":["literal","numeric-literal","int","float","decimal"],"description":"","content":"A value written in a numeric-literal always represents a precise type, which is the singleton type that the literal represents. The broad type of the literal always belongs only to one of the basic types int, float, or decimal.\nFor example, the type of literal 10 is integer 10, and its broad type is int. This is not always true. Depending on the context, literal 10 can represent floating point value 10.0 or decimal value 10.\nnumeric-literals.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import ballerina/io; const int TEN = 10; public function main() { var a1 = 10; TEN a2 = 10; float a3 = 10; decimal a4 = 10; float|decimal a5 = 10; var a6 = 10.0; io:println(a1 is int); io:println(a2 is TEN); io:println(a3); io:println(a4); io:println(a5 is float); io:println(a6 is float); } bal run numeric-literals.bal 1 2 3 4 5 6 true true 10.0 10 true true Ballerina 2201.1.1 - View Source When determining the broad type of a literal, following 3 steps algorithm\u0026nbsp; is used.\nflowchart TB subgraph Step1 [Step 1: Check Syntactic Form] direction TB CheckLiteral(Check Numeric Literal) CheckFloat{Ends With\nf/F?} CheckFloatHex{Floating\nPoint\nHex\nLiteral?} CheckDecimal{Ends With\nd/D?} CheckFloatingLiteral{Floating\nPoint\nLiteral?} CF[Only Candidate\nfloat] CD[Only Candidate\ndecimal] CFD[Candidates Are\nfloat,decimal] CIFD[Candidates are\nint,float,decimal] CandidateList[/Create Possible\nCandidates List /] CheckLiteral --\u003e CheckFloat CheckFloat --\u003e |No| CheckFloatHex CheckFloatHex --\u003e |No| CheckDecimal CheckDecimal --\u003e |No| CheckFloatingLiteral CheckFloat --\u003e |Yes| CF CheckFloatHex --\u003e |Yes| CF CheckDecimal --\u003e |Yes| CD CheckFloatingLiteral --\u003e |Yes| CFD CheckFloatingLiteral --\u003e |No| CIFD CF--\u003eCandidateList CD--\u003eCandidateList CFD--\u003eCandidateList CIFD--\u003eCandidateList end subgraph Step2 [Step 2: Check With Contextually Expected Type] direction TB CandidateList1(Possible Candidates List) Foreach[/For Each Candidate /] Candidate(\"Possible Candidate\n(N)\") CheckContextType[/\"Check Contextually\nExpected Type\n(T)\"/] Intersect[/Check Intersection\nT \u0026 N/] Empty{Empty?} Remove[/Remove Candidate\nFrom The List/] CheckNext{Has\nNext\nCandidate?} CandidateList1--\u003eForeach Foreach--\u003eCandidate CheckContextType--\u003eIntersect Candidate--\u003eIntersect Intersect--\u003eEmpty Empty--\u003e|Yes|Remove Remove--\u003eCheckNext Empty--\u003e|No| CheckNext CheckNext--\u003e|Yes|Foreach CheckNext--\u003e|No|Continue end subgraph Step3 [Step 3: Check Updated Candidate List] direction TB EmptyCandidates{No\nPossible\nCandidates} HasInt{Has int?} HasFloat{Has float?} Int((int)) Float((float)) Decimal((decimal)) Stop((Error)) EmptyCandidates--\u003e|Yes|Stop EmptyCandidates--\u003e|No|HasInt HasInt--\u003e|Yes|Int HasInt--\u003e|No|HasFloat HasFloat--\u003e|Yes|Float HasFloat--\u003e|No|Decimal end Step1 --\u003e Step2 Step2 --\u003e Step3 "},{"uri":"https://bal.tips/examples/expr/literals/base16literal/","title":"Base16 Byte Array Literal","tags":["literal","byte-array-literal","byte","Base16Literal"],"description":"","content":"You can use Base16 Byte Array Literal syntax to represent bytes in Hex textual form.\nBase16 Literal uses Hex Digits; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a or A, b or B, c or C, d or D, e or E, f or F. In regex form, A..F | a..f | 0..9 You need two Hex digits to represent a byte. One hex digits represent 4 bits. i.e . 0 -\u0026gt; 0000, 9 -\u0026gt; 1001, A -\u0026gt; 1010, F -\u0026gt; 1111 So 0A in hex means 0000 1010 which equals byte value 10. Similarly 11 -\u0026gt; 0001 0001(17), AB -\u0026gt; 1010 1011(171) You can have any white space in between two Hex Digits. Group Hex Digits to improve the readability of your code. Writing Hex digits in pairs or even numbers is a good option. Base16Literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { byte[] a = base16 `11AB22CD`; byte[] b = base16 `c3 d4 e5 f6`; byte[] c = base16 ` 55 EE 66 FF 77 AB 88 CD 99 EF 00 AA `; io:println(a); io:println(b); io:println(c); } bal run Base16Literal.bal 1 2 3 [17,171,34,205] [195,212,229,246] [85,238,102,255,119,171,136,205,153,239,0,170] Ballerina 2201.1.1 - View Source Known Limitation. The byte array type is not inferred properly\u0026nbsp; "},{"uri":"https://bal.tips/examples/expr/literals/base64literal/","title":"Base64 Byte Array Literal","tags":["literal","byte-array-literal","byte","Base64Literal"],"description":"","content":"You can use Base64 Byte Array Literal syntax to represent bytes in Base64 encoded form.\nBase64 Literal uses Base64 alphabet; A..Z | a..z | 0..9 | + | /\nTotal 64 characters = 26 Uppercase Letters + 26 Lowercase Letters + 10 numbers + 2 chars. Each Base64 character represents 6 bits. The Encoding table is the same as RFC 4648. You need four Base64 characters to represent 3 bytes.\n4 x 6 bits = 24 bits = 3 bytes The length of Base64 literal must be a multiple of four.\nYou can add one or two padding characters = to make its length multiple of 4. Single = means the last four characters will represent only two bytes. == means the last four characters will represent only one byte. = or == always comes at the end of the literal. See Examples You can have any white space in between two Base64 Characters.\nGroup Base64 Characters to improve the readability of your code. Writing Base64 Characters in a group of 4 characters is a good option. Base64Literal.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import ballerina/io; public function main() { byte[] a = base64 `AAAB`; byte[] b = base64 `ABB=`; byte[] c = base64 `BC==`; byte[] d = base64 `ABCD pqrs 5678 +/12`; io:println(a); io:println(b); io:println(c); io:println(d); } bal run Base64Literal.bal 1 2 3 4 [0,0,1] [0,16] [4] [0,16,131,166,170,236,231,174,252,251,253,118] Ballerina 2201.1.1 - View Source Known Limitation. The byte array type is not inferred properly\u0026nbsp; Base 64 Encoding Table # Char Bits # Char Bits # Char Bits # Char Bits 0 A 000000 16 Q 010000 32 g 100000 48 w 110000 1 B 000001 17 R 010001 33 h 100001 49 x 110001 2 C 000010 18 S 010010 34 i 100010 50 y 110010 3 D 000011 19 T 010011 35 j 100011 51 z 110011 4 E 000100 20 U 010100 36 k 100100 52 0 110100 5 F 000101 21 V 010101 37 l 100101 53 1 110101 6 G 000110 22 W 010110 38 m 100110 54 2 110110 7 H 000111 23 X 010111 39 n 100111 55 3 110111 8 I 001000 24 Y 011000 40 o 101000 56 4 111000 9 J 001001 25 Z 011001 41 p 101001 57 5 111001 10 K 001010 26 a 011010 42 q 101010 58 6 111010 11 L 001011 27 b 011011 43 r 101011 59 7 111011 12 M 001100 28 c 011100 44 s 101100 60 8 111100 13 N 001101 29 d 011101 45 t 101101 61 9 111101 14 O 001110 30 e 011110 46 u 101110 62 + 111110 15 P 001111 31 f 011111 47 v 101111 63 / 111111 Base64 to Byte Explained Example 1: base64 `AAAB` Base64 A A A B Index 0 0 0 1 Bit pattern 000000 000000 000000 000001 Byte 0000 0000 0000 0000 0000 00001 Ballerina byte 0 0 1 Example 2: base64 `ABB=` Base64 A B B = Index 0 1 1 X Bit pattern 000000 000001 000001 000000 Byte 0000 0000 0001 0000 x Ballerina byte 0 16 Example 3: base64 `BC==` Base64 B C = = Index 1 2 X X Bit pattern 000001 000010 000000 000000 Byte 0000 0100 X X Ballerina byte 4 "},{"uri":"https://bal.tips/learn-syntax/expr/template/","title":"Template Expressions","tags":["template"],"description":"","content":"Template Syntax uses two ` backtick letters to enclose a string with interpolated expressions. There are several variations of the Template Expressions\u0026nbsp; defined in the Language Specification.\nHere is the summary.\nType Description Example string template Constructs String values string `Hello, ${name}` xml template Constructs XML values xml `\u0026lt;name\u0026gt;${name}\u0026lt;/name\u0026gt;` raw template Constructs object values\nthat subtype of\nobject:RawTemplate üöß Coming Soon\u0026hellip; üëâ Template Expression uses interpolated expressions. Let\u0026rsquo;s say the expression you want to interpolate is expr, then interpolated expression is written as ${expr}. The semantics of the interpolated expression depend on each template kind. See each kind for more details.\nüëâ byte-array-literal Syntax uses the same syntax as the Template expression, But it doesn\u0026rsquo;t support interpolated expressions and is always a constant expression. Because of these reasons, it is more like a literal, than a template expression.\nRelated Tips üí°\u0026nbsp;String Templates üí°\u0026nbsp;\u0026nbsp;String Templates A String template expression constructs a string value using the Template expression. Support interpolation (Syntax ${expr}) and each interpolation expression must have a type that is a subtype of boolean|int|float|decimal|string. You can use this expression in places where you use string concatenation, or you need to build multi-line string values.\ntemplate.bal template-special.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import ballerina/io; type Employee record { int id; string name; decimal salary; }; public function main() { Employee emp = { name : \u0026#34;Bob\u0026#34;, id : 2, salary: 45000}; string department = \u0026#34;IT\u0026#34;; string s = string `Hello, ${emp.name}!`; string s2 = string `Your id is ${emp.id} Your department is ${department} Your salary is ${emp.salary}`; io:println(s); io:println(s2); } bal run template.bal 1 2 3 4 Hello, Bob! Your id is 2 Your department is IT Your salary is 45000 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { string s1 = string `\\\\ \\n \\t`; string s2 = string `backtick - ${\u0026#34;`\u0026#34;}`; int value = 100; string s3 = string `Price $${value}`; io:println(s1); io:println(s2); io:println(s3); } bal run template-special.bal 1 2 3 \\\\ \\n \\t backtick - ` Price $100 Ballerina 2201.1.1 - View Source template string-template string \u0026nbsp;See more "},{"uri":"https://bal.tips/examples/expr/string-template/string-template/","title":"String Templates","tags":["template","string-template","string"],"description":"","content":"A String template expression constructs a string value using the Template expression. Support interpolation (Syntax ${expr}) and each interpolation expression must have a type that is a subtype of boolean|int|float|decimal|string. You can use this expression in places where you use string concatenation, or you need to build multi-line string values.\nHow String Interpolation works\nStep 1 - Take every character that is not part of the interpolation within the two ` Backtick, including newline, CR, etc. These characters are sliced based on interpolation expression positions. Step 2- Evaluate each interpolation expression in the order in which they were written. Then Take the string representation of the values, by using the value:toString() lang-lib function. Step 3 - Construct the final string value interleaving Step 1 and Step 2 results. Special Cases\nüö´ Unlike string-literal , String Template doesn\u0026rsquo;t support escape characters. ‚úÖ Use string-literal with interpolation to type such characters i.e ${\u0026quot;`\u0026quot;}. template.bal template-special.bal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import ballerina/io; type Employee record { int id; string name; decimal salary; }; public function main() { Employee emp = { name : \u0026#34;Bob\u0026#34;, id : 2, salary: 45000}; string department = \u0026#34;IT\u0026#34;; string s = string `Hello, ${emp.name}!`; string s2 = string `Your id is ${emp.id} Your department is ${department} Your salary is ${emp.salary}`; io:println(s); io:println(s2); } bal run template.bal 1 2 3 4 Hello, Bob! Your id is 2 Your department is IT Your salary is 45000 Ballerina 2201.1.1 - View Source 1 2 3 4 5 6 7 8 9 10 11 12 13 import ballerina/io; public function main() { string s1 = string `\\\\ \\n \\t`; string s2 = string `backtick - ${\u0026#34;`\u0026#34;}`; int value = 100; string s3 = string `Price $${value}`; io:println(s1); io:println(s2); io:println(s3); } bal run template-special.bal 1 2 3 \\\\ \\n \\t backtick - ` Price $100 Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/examples/helloworld/http/service/","title":"Hello World API","tags":["hello-world","http:service"],"description":"","content":"Let\u0026rsquo;s create a Hello, World HTTP API. This API will accept HTTP get request at http://localhost:8080/greeting.\nI will use ballerina/http module to implement this API.\nservice.bal 1 2 3 4 5 6 7 8 9 10 11 import ballerina/http; service on new http:Listener(8080) { resource function get greeting(string? name) returns json { if name == () { return {\u0026#34;content\u0026#34;: \u0026#34;Hello, World!\u0026#34;}; } string content = string `Hello, ${name}!`; return {\u0026#34;content\u0026#34;: content}; } } bal run service.bal Ballerina 2201.1.1 - View Source How to run this example? Download service.bal file and start the program using bal run service.bal command. Visit http://localhost:8080/greeting. You will see {\u0026quot;content\u0026quot;:\u0026quot;Hello, World!\u0026quot;} JSON output. Now let\u0026rsquo;s try providing a value to the name query parameter. Visit http://localhost:8080/greeting?name=Ballerina. You will see {\u0026quot;content\u0026quot;:\u0026quot;Hello, Ballerina!\u0026quot;} JSON output. "},{"uri":"https://bal.tips/examples/langlib/int/intro/","title":"lang.int Lang Library","tags":["int","lang.int"],"description":"","content":"lang.int Lang Library provides a set of functions that operates on an integer value. See available operations in ballerina/lang.int\u0026nbsp; module.\nintro.bal 1 2 3 4 5 6 7 8 9 10 11 12 import ballerina/io; public function main() returns error? { int sum = int:sum(1, 2, 3, 4, 5); io:println(sum); int max = int:max(1, 2, 3, 4, 5); io:println(max); int i = check int:fromString(\u0026#34;123\u0026#34;); io:println(i); } bal run intro.bal 1 2 3 15 5 123 Ballerina 2201.1.1 - View Source "},{"uri":"https://bal.tips/examples/types/byte/java/","title":"Byte - Ballerina vs Java","tags":["byte","java"],"description":"","content":"Ballerina byte type vs Java byte Comparison\nBallerina Java Type byte byte or java.lang.Byte Signed Unsigned Signed** Max value 255 127 Min value 0 -128 0000 0000 0 0 0000 0001 1 1 0111 1111 127 127 1000 0000 128 -128 1000 0001 129 -127 (= -128 + 1) 1111 1111 255 -1 (= -128 + 127) ** Read Two\u0026rsquo;s Complement\u0026nbsp; "},{"uri":"https://bal.tips/examples/helloworld/main-slide/","title":"Let&#39;s Write a Hello, World!","tags":[],"description":"","content":"Hello, World! \u0026ndash;\u0026raquo;\u0026gt;\u0026ndash;\nCreate main.bal Create main.bal file and Open it.\nüí° Use VSCode with Ballerina Extension. \u0026ndash;\u0026raquo;\u0026gt;\u0026ndash;\nAdd main function public function main() { } The main function is the program entry point. The public keyword is required to make it visible outside. \u0026ndash;\u0026raquo;\u0026gt;\u0026ndash;\nImport ballerina/io module import ballerina/io; public function main() { } A module is a collection of Ballerina codes. Refer a module using an organization (eg: ballerina) name and a module name (eg: io). \u0026ndash;\u0026raquo;\u0026gt;\u0026ndash;\nCall io:println function import ballerina/io; public function main() { io:println(\u0026#34;Hello, World...!\u0026#34;); } Imported module name works as a prefix, i.e io: We use the io module\u0026rsquo;s println function to write to the stdout. Let\u0026rsquo;s pass a string value \u0026quot;Hello, World!\u0026quot; to the function. \u0026ndash;\u0026raquo;\u0026gt;\u0026ndash;\nLet\u0026rsquo;s add one more line import ballerina/io; public function main() { io:println(\u0026#34;üëãüåè\u0026#34;); io:println(\u0026#34;Hello, World...!\u0026#34;); } üòä string type supports unicode code points too. \u0026ndash;\u0026raquo;\u0026gt;\u0026ndash;\nRun main.bal Open the terminal and execute.\nüëãüåè Hello, World...! "},{"uri":"https://bal.tips/tags/string/","title":"string","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/string-template/","title":"string-template","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/template/","title":"template","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/decimal/","title":"decimal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/float/","title":"float","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/int/","title":"int","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/literal/","title":"literal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/numeric-literal/","title":"numeric-literal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/byte/","title":"byte","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/java/","title":"java","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/base16literal/","title":"Base16Literal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/base64literal/","title":"Base64Literal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/byte-array-literal/","title":"byte-array-literal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/doublequotedstringliteral/","title":"DoubleQuotedStringLiteral","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/string-literal/","title":"string-literal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/numericescape/","title":"NumericEscape","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/stringescape/","title":"StringEscape","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/hex/","title":"hex","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/expr/","title":"expr","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/readonly/","title":"readonly","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/lang.int/","title":"lang.int","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/boolean/","title":"boolean","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/nil/","title":"nil","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/exponent/","title":"exponent","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/boolean-literal/","title":"boolean-literal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/nil-literal/","title":"nil-literal","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/null/","title":"null","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/hello-world/","title":"hello-world","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/httpservice/","title":"http:service","tags":[],"description":"","content":""},{"uri":"https://bal.tips/tags/ioprintln/","title":"io:println","tags":[],"description":"","content":""},{"uri":"https://bal.tips/_footer/","title":"","tags":[],"description":"","content":" Bal.tips 2022 Hasitha Aravinda\u0026nbsp; . Built using docdock\u0026nbsp; and Hugo\u0026nbsp; "},{"uri":"https://bal.tips/_header/","title":"","tags":[],"description":"","content":" üí° Ballerina Tips "},{"uri":"https://bal.tips/_menu-footer/","title":"","tags":[],"description":"","content":" About All Examples Thank you Copyright About Author\u0026nbsp; Website Source\u0026nbsp; Report an Issue\u0026nbsp; Links Ballerina.io\u0026nbsp; Ballerina By Examples\u0026nbsp; Ballerina Language Specification\u0026nbsp; Bal.tips - A Blog by Hasitha Aravinda\u0026nbsp; .\n"},{"uri":"https://bal.tips/","title":"üí° Ballerina Coding Tips","tags":[],"description":"","content":" üëãüåè "},{"uri":"https://bal.tips/copyright/","title":"Copyright","tags":[],"description":"","content":"Content \u0026nbsp; This work including the content of pages, tips etc. is licensed under a Creative Commons Attribution-NoDerivatives 4.0 International License\u0026nbsp; by Hasitha Aravinda\u0026nbsp; .\n\u0026nbsp; All Ballerina Example Source in this website are licensed under MIT License\u0026nbsp; , unless explicitly mention in the top of the source code.\nTerms and Trademarks Ballerina Ballerina is an open-source programming language for the cloud that makes it easier to use, combine, and create network services - ballerina.io\u0026nbsp; Ballerina is a trademark of WSO2, Inc\u0026nbsp; . All other marks and logos are property of their respective owners.\nImages and Figures The Mascot image is from Robot chatbot vector created by upklyak - www.freepik.com\u0026nbsp; . See their work here.\u0026nbsp; "},{"uri":"https://bal.tips/thankyou/","title":"Thank you","tags":[],"description":"","content":"When I built this website, I was inspired by multiple Hugo themes. I built this re-using and modifying some of the Hugo themes content. Also, I am using multiple awesome Open Source Libraries.\nI thank the original authors for their hard work and for making this website simple, clean, and beautiful.\nPrimary Theme - hugo-theme-docdock\u0026nbsp; by vjeantet\u0026nbsp; MIT license. Short Codes inspirations Tabs from hugo-theme-learn\u0026nbsp; by matcornic\u0026nbsp; - MIT license. hugo-book\u0026nbsp; by alex-shpak\u0026nbsp; - MIT license. reveal.js\u0026nbsp; by hakimel\u0026nbsp; MIT license. reveal.js-menu\u0026nbsp; by denehyg\u0026nbsp; MIT license. "}]